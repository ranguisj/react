{"ast":null,"code":"const PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst AUTO_ID_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'; // timestamp of last push, used to prevent local collisions if you push twice in one ms.\n\nlet lastPushTime = 0; // we generate 72-bits of randomness which get turned into 12 characters and appended to the\n// timestamp to prevent collisions with other clients.  We store the last characters we\n// generated because in the event of a collision, we'll use those same characters except\n// \"incremented\" by one.\n\nconst lastRandChars = [];\n/**\n * Generate a firebase id - for use with ref().push(val, cb) - e.g. -KXMr7k2tXUFQqiaZRY4'\n * @param serverTimeOffset - pass in server time offset from native side\n * @returns {string}\n */\n\nexport function generateDatabaseId() {\n  let serverTimeOffset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  const timeStampChars = new Array(8);\n  let now = new Date().getTime() + serverTimeOffset;\n  const duplicateTime = now === lastPushTime;\n  lastPushTime = now;\n\n  for (let i = 7; i >= 0; i -= 1) {\n    timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n    now = Math.floor(now / 64);\n  }\n\n  if (now !== 0) {\n    throw new Error('We should have converted the entire timestamp.');\n  }\n\n  let id = timeStampChars.join('');\n\n  if (!duplicateTime) {\n    for (let i = 0; i < 12; i += 1) {\n      lastRandChars[i] = Math.floor(Math.random() * 64);\n    }\n  } else {\n    // if the timestamp hasn't changed since last push,\n    // use the same random number, but increment it by 1.\n    let i;\n\n    for (i = 11; i >= 0 && lastRandChars[i] === 63; i -= 1) {\n      lastRandChars[i] = 0;\n    }\n\n    lastRandChars[i] += 1;\n  }\n\n  for (let i = 0; i < 12; i++) {\n    id += PUSH_CHARS.charAt(lastRandChars[i]);\n  }\n\n  if (id.length !== 20) {\n    throw new Error('Length should be 20.');\n  }\n\n  return id;\n}\n/**\n * Generate a firestore auto id for use with collection/document .add()\n * @return {string}\n */\n\nexport function generateFirestoreId() {\n  let autoId = '';\n\n  for (let i = 0; i < 20; i++) {\n    autoId += AUTO_ID_CHARS.charAt(Math.floor(Math.random() * AUTO_ID_CHARS.length));\n  }\n\n  return autoId;\n}","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/app/lib/common/id.js"],"names":["PUSH_CHARS","AUTO_ID_CHARS","lastPushTime","lastRandChars","generateDatabaseId","serverTimeOffset","timeStampChars","Array","now","Date","getTime","duplicateTime","i","charAt","Math","floor","Error","id","join","random","length","generateFirestoreId","autoId"],"mappings":"AAAA,MAAMA,UAAU,GAAG,kEAAnB;AAEA,MAAMC,aAAa,GAAG,gEAAtB,C,CAEA;;AACA,IAAIC,YAAY,GAAG,CAAnB,C,CAEA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,EAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,GAAkD;AAAA,MAAtBC,gBAAsB,uEAAH,CAAG;AACvD,QAAMC,cAAc,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAvB;AACA,MAAIC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuBL,gBAAjC;AACA,QAAMM,aAAa,GAAGH,GAAG,KAAKN,YAA9B;AAEAA,EAAAA,YAAY,GAAGM,GAAf;;AAEA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9BN,IAAAA,cAAc,CAACM,CAAD,CAAd,GAAoBZ,UAAU,CAACa,MAAX,CAAkBL,GAAG,GAAG,EAAxB,CAApB;AACAA,IAAAA,GAAG,GAAGM,IAAI,CAACC,KAAL,CAAWP,GAAG,GAAG,EAAjB,CAAN;AACD;;AAED,MAAIA,GAAG,KAAK,CAAZ,EAAe;AACb,UAAM,IAAIQ,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,MAAIC,EAAE,GAAGX,cAAc,CAACY,IAAf,CAAoB,EAApB,CAAT;;AAEA,MAAI,CAACP,aAAL,EAAoB;AAClB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9BT,MAAAA,aAAa,CAACS,CAAD,CAAb,GAAmBE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACK,MAAL,KAAgB,EAA3B,CAAnB;AACD;AACF,GAJD,MAIO;AACL;AACA;AACA,QAAIP,CAAJ;;AACA,SAAKA,CAAC,GAAG,EAAT,EAAaA,CAAC,IAAI,CAAL,IAAUT,aAAa,CAACS,CAAD,CAAb,KAAqB,EAA5C,EAAgDA,CAAC,IAAI,CAArD,EAAwD;AACtDT,MAAAA,aAAa,CAACS,CAAD,CAAb,GAAmB,CAAnB;AACD;;AAEDT,IAAAA,aAAa,CAACS,CAAD,CAAb,IAAoB,CAApB;AACD;;AAED,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BK,IAAAA,EAAE,IAAIjB,UAAU,CAACa,MAAX,CAAkBV,aAAa,CAACS,CAAD,CAA/B,CAAN;AACD;;AAED,MAAIK,EAAE,CAACG,MAAH,KAAc,EAAlB,EAAsB;AACpB,UAAM,IAAIJ,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,SAAOC,EAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASI,mBAAT,GAA+B;AACpC,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BU,IAAAA,MAAM,IAAIrB,aAAa,CAACY,MAAd,CAAqBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACK,MAAL,KAAgBlB,aAAa,CAACmB,MAAzC,CAArB,CAAV;AACD;;AACD,SAAOE,MAAP;AACD","sourcesContent":["const PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst AUTO_ID_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n// timestamp of last push, used to prevent local collisions if you push twice in one ms.\nlet lastPushTime = 0;\n\n// we generate 72-bits of randomness which get turned into 12 characters and appended to the\n// timestamp to prevent collisions with other clients.  We store the last characters we\n// generated because in the event of a collision, we'll use those same characters except\n// \"incremented\" by one.\nconst lastRandChars = [];\n\n/**\n * Generate a firebase id - for use with ref().push(val, cb) - e.g. -KXMr7k2tXUFQqiaZRY4'\n * @param serverTimeOffset - pass in server time offset from native side\n * @returns {string}\n */\nexport function generateDatabaseId(serverTimeOffset = 0) {\n  const timeStampChars = new Array(8);\n  let now = new Date().getTime() + serverTimeOffset;\n  const duplicateTime = now === lastPushTime;\n\n  lastPushTime = now;\n\n  for (let i = 7; i >= 0; i -= 1) {\n    timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n    now = Math.floor(now / 64);\n  }\n\n  if (now !== 0) {\n    throw new Error('We should have converted the entire timestamp.');\n  }\n\n  let id = timeStampChars.join('');\n\n  if (!duplicateTime) {\n    for (let i = 0; i < 12; i += 1) {\n      lastRandChars[i] = Math.floor(Math.random() * 64);\n    }\n  } else {\n    // if the timestamp hasn't changed since last push,\n    // use the same random number, but increment it by 1.\n    let i;\n    for (i = 11; i >= 0 && lastRandChars[i] === 63; i -= 1) {\n      lastRandChars[i] = 0;\n    }\n\n    lastRandChars[i] += 1;\n  }\n\n  for (let i = 0; i < 12; i++) {\n    id += PUSH_CHARS.charAt(lastRandChars[i]);\n  }\n\n  if (id.length !== 20) {\n    throw new Error('Length should be 20.');\n  }\n\n  return id;\n}\n\n/**\n * Generate a firestore auto id for use with collection/document .add()\n * @return {string}\n */\nexport function generateFirestoreId() {\n  let autoId = '';\n\n  for (let i = 0; i < 20; i++) {\n    autoId += AUTO_ID_CHARS.charAt(Math.floor(Math.random() * AUTO_ID_CHARS.length));\n  }\n  return autoId;\n}\n"]},"metadata":{},"sourceType":"module"}