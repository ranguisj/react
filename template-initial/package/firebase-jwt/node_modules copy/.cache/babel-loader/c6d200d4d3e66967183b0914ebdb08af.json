{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { getAppModule, getNativeModule } from './registry/nativeModule';\nimport SharedEventEmitter from './SharedEventEmitter';\nlet firebaseJson = null;\nexport default class FirebaseModule {\n  constructor(app, config, customUrlOrRegion) {\n    this._app = app;\n    this._nativeModule = null;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this._config = Object.assign({}, config);\n  }\n\n  get app() {\n    return this._app;\n  }\n\n  get firebaseJson() {\n    if (firebaseJson) {\n      return firebaseJson;\n    }\n\n    firebaseJson = JSON.parse(getAppModule().FIREBASE_RAW_JSON);\n    return firebaseJson;\n  }\n\n  get emitter() {\n    return SharedEventEmitter;\n  } // TODO Handle custom url or region?\n\n\n  eventNameForApp() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return `${this.app.name}-${args.join('-')}`;\n  }\n\n  get native() {\n    if (this._nativeModule) {\n      return this._nativeModule;\n    }\n\n    this._nativeModule = getNativeModule(this);\n    return this._nativeModule;\n  }\n\n} // Instance of checks don't work once compiled\n\nFirebaseModule.__extended__ = {};","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/app/lib/internal/FirebaseModule.js"],"names":["getAppModule","getNativeModule","SharedEventEmitter","firebaseJson","FirebaseModule","constructor","app","config","customUrlOrRegion","_app","_nativeModule","_customUrlOrRegion","_config","Object","assign","JSON","parse","FIREBASE_RAW_JSON","emitter","eventNameForApp","args","name","join","native","__extended__"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,EAAuBC,eAAvB,QAA8C,yBAA9C;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,IAAIC,YAAY,GAAG,IAAnB;AAEA,eAAe,MAAMC,cAAN,CAAqB;AAClCC,EAAAA,WAAW,CAACC,GAAD,EAAMC,MAAN,EAAcC,iBAAd,EAAiC;AAC1C,SAAKC,IAAL,GAAYH,GAAZ;AACA,SAAKI,aAAL,GAAqB,IAArB;AACA,SAAKC,kBAAL,GAA0BH,iBAA1B;AACA,SAAKI,OAAL,GAAeC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,MAAlB,CAAf;AACD;;AAEM,MAAHD,GAAG,GAAG;AACR,WAAO,KAAKG,IAAZ;AACD;;AAEe,MAAZN,YAAY,GAAG;AACjB,QAAIA,YAAJ,EAAkB;AAChB,aAAOA,YAAP;AACD;;AACDA,IAAAA,YAAY,GAAGY,IAAI,CAACC,KAAL,CAAWhB,YAAY,GAAGiB,iBAA1B,CAAf;AACA,WAAOd,YAAP;AACD;;AAEU,MAAPe,OAAO,GAAG;AACZ,WAAOhB,kBAAP;AACD,GAtBiC,CAwBlC;;;AACAiB,EAAAA,eAAe,GAAU;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACvB,WAAQ,GAAE,KAAKd,GAAL,CAASe,IAAK,IAAGD,IAAI,CAACE,IAAL,CAAU,GAAV,CAAe,EAA1C;AACD;;AAES,MAANC,MAAM,GAAG;AACX,QAAI,KAAKb,aAAT,EAAwB;AACtB,aAAO,KAAKA,aAAZ;AACD;;AACD,SAAKA,aAAL,GAAqBT,eAAe,CAAC,IAAD,CAApC;AACA,WAAO,KAAKS,aAAZ;AACD;;AAnCiC,C,CAsCpC;;AACAN,cAAc,CAACoB,YAAf,GAA8B,EAA9B","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { getAppModule, getNativeModule } from './registry/nativeModule';\nimport SharedEventEmitter from './SharedEventEmitter';\n\nlet firebaseJson = null;\n\nexport default class FirebaseModule {\n  constructor(app, config, customUrlOrRegion) {\n    this._app = app;\n    this._nativeModule = null;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this._config = Object.assign({}, config);\n  }\n\n  get app() {\n    return this._app;\n  }\n\n  get firebaseJson() {\n    if (firebaseJson) {\n      return firebaseJson;\n    }\n    firebaseJson = JSON.parse(getAppModule().FIREBASE_RAW_JSON);\n    return firebaseJson;\n  }\n\n  get emitter() {\n    return SharedEventEmitter;\n  }\n\n  // TODO Handle custom url or region?\n  eventNameForApp(...args) {\n    return `${this.app.name}-${args.join('-')}`;\n  }\n\n  get native() {\n    if (this._nativeModule) {\n      return this._nativeModule;\n    }\n    this._nativeModule = getNativeModule(this);\n    return this._nativeModule;\n  }\n}\n\n// Instance of checks don't work once compiled\nFirebaseModule.__extended__ = {};\n"]},"metadata":{},"sourceType":"module"}