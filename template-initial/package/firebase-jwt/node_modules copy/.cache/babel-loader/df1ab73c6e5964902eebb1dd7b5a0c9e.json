{"ast":null,"code":"var _jsxFileName = \"/Users/jeremyranguis/greatwanderline/package/firebase-jwt/src/components/firebase/FirebaseContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { firebase } from './Firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null\n};\n\nconst reducer = (state, action) => {\n  if (action.type === 'AUTH_STATE_CHANGED') {\n    const {\n      isAuthenticated,\n      user\n    } = action.payload;\n    return { ...state,\n      isAuthenticated,\n      isInitialized: true,\n      user\n    };\n  }\n\n  return state;\n};\n\nconst AuthContext = /*#__PURE__*/createContext({ ...initialState,\n  platform: 'Firebase',\n  createUserWithEmailAndPassword: () => Promise.resolve(),\n  signInWithEmailAndPassword: () => Promise.resolve(),\n  logout: () => Promise.resolve(),\n  onceGetUsers: () => Promise.resolve(),\n  CreateUser: () => Promise.resolve()\n});\nexport const AuthProvider = props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => firebase.auth().onAuthStateChanged(user => {\n    if (user) {\n      // Here you should extract the complete user profile to make it available in your entire app.\n      // The auth state only provides basic information.\n      dispatch({\n        type: 'AUTH_STATE_CHANGED',\n        payload: {\n          isAuthenticated: true,\n          user: {\n            id: user.uid,\n            avatar: user.photoURL,\n            email: user.email\n          }\n        }\n      });\n    } else {\n      dispatch({\n        type: 'AUTH_STATE_CHANGED',\n        payload: {\n          isAuthenticated: false,\n          user: null\n        }\n      });\n    }\n  }), [dispatch]); // Sign Up\n\n  const createUserWithEmailAndPassword = (email, password) => firebase.auth().createUserWithEmailAndPassword(email, password); // Sign In\n\n\n  const signInWithEmailAndPassword = (email, password) => firebase.auth().signInWithEmailAndPassword(email, password); // Sign out\n\n\n  const logout = () => firebase.auth().signOut();\n\n  const CreateUser = (id, username, email) => firebase.database().ref(`users/${id}`).set({\n    username,\n    email\n  });\n\n  const onceGetUsers = () => firebase.database().ref('users').once('value');\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: { ...state,\n      platform: 'Firebase',\n      createUserWithEmailAndPassword,\n      signInWithEmailAndPassword,\n      CreateUser,\n      onceGetUsers,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = AuthProvider;\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/src/components/firebase/FirebaseContext.js"],"names":["createContext","useEffect","useReducer","PropTypes","firebase","initialState","isAuthenticated","isInitialized","user","reducer","state","action","type","payload","AuthContext","platform","createUserWithEmailAndPassword","Promise","resolve","signInWithEmailAndPassword","logout","onceGetUsers","CreateUser","AuthProvider","props","children","dispatch","auth","onAuthStateChanged","id","uid","avatar","photoURL","email","password","signOut","username","database","ref","set","once","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import { createContext, useEffect, useReducer } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { firebase } from './Firebase';\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  isInitialized: false,\r\n  user: null,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  if (action.type === 'AUTH_STATE_CHANGED') {\r\n    const { isAuthenticated, user } = action.payload;\r\n\r\n    return {\r\n      ...state,\r\n      isAuthenticated,\r\n      isInitialized: true,\r\n      user,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst AuthContext = createContext({\r\n  ...initialState,\r\n  platform: 'Firebase',\r\n  createUserWithEmailAndPassword: () => Promise.resolve(),\r\n  signInWithEmailAndPassword: () => Promise.resolve(),\r\n  logout: () => Promise.resolve(),\r\n  onceGetUsers: () => Promise.resolve(),\r\n  CreateUser: () => Promise.resolve(),\r\n});\r\n\r\nexport const AuthProvider = (props) => {\r\n  const { children } = props;\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  useEffect(\r\n    () =>\r\n      firebase.auth().onAuthStateChanged((user) => {\r\n        if (user) {\r\n          // Here you should extract the complete user profile to make it available in your entire app.\r\n          // The auth state only provides basic information.\r\n          dispatch({\r\n            type: 'AUTH_STATE_CHANGED',\r\n            payload: {\r\n              isAuthenticated: true,\r\n              user: {\r\n                id: user.uid,\r\n                avatar: user.photoURL,\r\n                email: user.email,\r\n              },\r\n            },\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: 'AUTH_STATE_CHANGED',\r\n            payload: {\r\n              isAuthenticated: false,\r\n              user: null,\r\n            },\r\n          });\r\n        }\r\n      }),\r\n    [dispatch],\r\n  );\r\n\r\n  // Sign Up\r\n  const createUserWithEmailAndPassword = (email, password) =>\r\n    firebase.auth().createUserWithEmailAndPassword(email, password);\r\n  // Sign In\r\n  const signInWithEmailAndPassword = (email, password) =>\r\n    firebase.auth().signInWithEmailAndPassword(email, password);\r\n\r\n  // Sign out\r\n  const logout = () => firebase.auth().signOut();\r\n  const CreateUser = (id, username, email) =>\r\n    firebase.database().ref(`users/${id}`).set({\r\n      username,\r\n      email,\r\n    });\r\n  const onceGetUsers = () => firebase.database().ref('users').once('value');\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        ...state,\r\n        platform: 'Firebase',\r\n        createUserWithEmailAndPassword,\r\n        signInWithEmailAndPassword,\r\n        CreateUser,\r\n        onceGetUsers,\r\n        logout,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nAuthProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default AuthContext;\r\n"]},"metadata":{},"sourceType":"module"}