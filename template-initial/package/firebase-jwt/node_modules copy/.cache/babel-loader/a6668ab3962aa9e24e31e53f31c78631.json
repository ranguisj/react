{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport { verify, sign } from 'jsonwebtoken';\nimport axios from './axios';\n\nconst isValidToken = accessToken => {\n  if (!accessToken) {\n    return false;\n  }\n\n  const decoded = jwtDecode(accessToken);\n  const currentTime = Date.now() / 1000;\n  return decoded.exp > currentTime;\n};\n\nconst setSession = accessToken => {\n  if (accessToken) {\n    localStorage.setItem('accessToken', accessToken);\n    axios.defaults.headers.common.Authorization = `Bearer ${accessToken}`;\n  } else {\n    localStorage.removeItem('accessToken');\n    delete axios.defaults.headers.common.Authorization;\n  }\n};\n\nexport { isValidToken, setSession, verify, sign };","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/src/components/jwt/Jwt.js"],"names":["jwtDecode","verify","sign","axios","isValidToken","accessToken","decoded","currentTime","Date","now","exp","setSession","localStorage","setItem","defaults","headers","common","Authorization","removeItem"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,YAAY,GAAIC,WAAD,IAAiB;AACpC,MAAI,CAACA,WAAL,EAAkB;AAChB,WAAO,KAAP;AACD;;AAED,QAAMC,OAAO,GAAGN,SAAS,CAACK,WAAD,CAAzB;AACA,QAAME,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC;AAEA,SAAOH,OAAO,CAACI,GAAR,GAAcH,WAArB;AACD,CATD;;AAWA,MAAMI,UAAU,GAAIN,WAAD,IAAiB;AAClC,MAAIA,WAAJ,EAAiB;AACfO,IAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCR,WAApC;AACAF,IAAAA,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA+C,UAASZ,WAAY,EAApE;AACD,GAHD,MAGO;AACLO,IAAAA,YAAY,CAACM,UAAb,CAAwB,aAAxB;AACA,WAAOf,KAAK,CAACW,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8BC,aAArC;AACD;AACF,CARD;;AAUA,SAASb,YAAT,EAAuBO,UAAvB,EAAmCV,MAAnC,EAA2CC,IAA3C","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport { verify, sign } from 'jsonwebtoken';\r\nimport axios from './axios';\r\n\r\nconst isValidToken = (accessToken) => {\r\n  if (!accessToken) {\r\n    return false;\r\n  }\r\n\r\n  const decoded = jwtDecode(accessToken);\r\n  const currentTime = Date.now() / 1000;\r\n\r\n  return decoded.exp > currentTime;\r\n};\r\n\r\nconst setSession = (accessToken) => {\r\n  if (accessToken) {\r\n    localStorage.setItem('accessToken', accessToken);\r\n    axios.defaults.headers.common.Authorization = `Bearer ${accessToken}`;\r\n  } else {\r\n    localStorage.removeItem('accessToken');\r\n    delete axios.defaults.headers.common.Authorization;\r\n  }\r\n};\r\n\r\nexport { isValidToken, setSession, verify, sign };\r\n"]},"metadata":{},"sourceType":"module"}