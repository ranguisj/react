{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isBoolean, isFunction, isObject, isUndefined } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentChange from './FirestoreDocumentChange';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nexport default class FirestoreQuerySnapshot {\n  constructor(firestore, query, nativeData) {\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map($ => new FirestoreDocumentChange(firestore, $));\n    this._docs = nativeData.documents.map($ => new FirestoreDocumentSnapshot(firestore, $));\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n  }\n\n  get docs() {\n    return this._docs;\n  }\n\n  get empty() {\n    return this._docs.length === 0;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  get size() {\n    return this._docs.length;\n  }\n\n  docChanges(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\");\n    }\n\n    let includeMetaDataChanges = false;\n\n    if (options) {\n      if (!isBoolean(options.includeMetadataChanges)) {\n        throw new Error(\"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\");\n      }\n\n      includeMetaDataChanges = options.includeMetadataChanges;\n    } // A get query should always return the document changes from native\n\n\n    if (this._source === 'get') {\n      return this._changes;\n    }\n\n    if (includeMetaDataChanges && this._excludesMetadataChanges) {\n      throw new Error('firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().');\n    }\n\n    return this._changes.filter($ => {\n      // Remove all changes that have come from metadata changes list\n      if (!includeMetaDataChanges) {\n        return $._isMetadataChange === false;\n      }\n\n      return true;\n    });\n  }\n\n  forEach(callback, thisArg) {\n    if (!isFunction(callback)) {\n      throw new Error(\"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\");\n    }\n\n    const cb = thisArg ? callback.bind(thisArg) : callback;\n\n    for (let i = 0; i < this._docs.length; i++) {\n      cb(this._docs[i], i);\n    }\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuerySnapshot)) {\n      throw new Error(\"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\");\n    } // Simple checks first\n\n\n    if (this.empty !== other.empty || this.size !== other.size || !this.metadata.isEqual(other.metadata)) {\n      return false;\n    } // Expensive check\n    // Each doc must be in order & have the same data\n\n\n    for (let i = 0; i < this.docs.length; i++) {\n      const thisDoc = this.docs[i];\n      const otherDoc = other.docs[i];\n\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/firestore/lib/FirestoreQuerySnapshot.js"],"names":["isBoolean","isFunction","isObject","isUndefined","FirestoreDocumentChange","FirestoreDocumentSnapshot","FirestoreSnapshotMetadata","FirestoreQuerySnapshot","constructor","firestore","query","nativeData","_query","_source","source","_excludesMetadataChanges","excludesMetadataChanges","_changes","changes","map","$","_docs","documents","_metadata","metadata","docs","empty","length","size","docChanges","options","Error","includeMetaDataChanges","includeMetadataChanges","filter","_isMetadataChange","forEach","callback","thisArg","cb","bind","i","isEqual","other","thisDoc","otherDoc"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isObject,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentChange from './FirestoreDocumentChange';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\n\nexport default class FirestoreQuerySnapshot {\n  constructor(firestore, query, nativeData) {\n    this._query = query;\n    this._source = nativeData.source;\n    this._excludesMetadataChanges = nativeData.excludesMetadataChanges;\n    this._changes = nativeData.changes.map($ => new FirestoreDocumentChange(firestore, $));\n    this._docs = nativeData.documents.map($ => new FirestoreDocumentSnapshot(firestore, $));\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n  }\n\n  get docs() {\n    return this._docs;\n  }\n\n  get empty() {\n    return this._docs.length === 0;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get query() {\n    return this._query;\n  }\n\n  get size() {\n    return this._docs.length;\n  }\n\n  docChanges(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.docChanges(*) 'options' expected an object.\",\n      );\n    }\n\n    let includeMetaDataChanges = false;\n\n    if (options) {\n      if (!isBoolean(options.includeMetadataChanges)) {\n        throw new Error(\n          \"firebase.firestore() QuerySnapshot.docChanges(*) 'options.includeMetadataChanges' expected a boolean.\",\n        );\n      }\n\n      includeMetaDataChanges = options.includeMetadataChanges;\n    }\n\n    // A get query should always return the document changes from native\n    if (this._source === 'get') {\n      return this._changes;\n    }\n\n    if (includeMetaDataChanges && this._excludesMetadataChanges) {\n      throw new Error(\n        'firebase.firestore() QuerySnapshot.docChanges() To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().',\n      );\n    }\n\n    return this._changes.filter($ => {\n      // Remove all changes that have come from metadata changes list\n      if (!includeMetaDataChanges) {\n        return $._isMetadataChange === false;\n      }\n\n      return true;\n    });\n  }\n\n  forEach(callback, thisArg) {\n    if (!isFunction(callback)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.forEach(*) 'callback' expected a function.\",\n      );\n    }\n\n    const cb = thisArg ? callback.bind(thisArg) : callback;\n\n    for (let i = 0; i < this._docs.length; i++) {\n      cb(this._docs[i], i);\n    }\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuerySnapshot)) {\n      throw new Error(\n        \"firebase.firestore() QuerySnapshot.isEqual(*) 'other' expected a QuerySnapshot instance.\",\n      );\n    }\n\n    // Simple checks first\n    if (\n      this.empty !== other.empty ||\n      this.size !== other.size ||\n      !this.metadata.isEqual(other.metadata)\n    ) {\n      return false;\n    }\n\n    // Expensive check\n    // Each doc must be in order & have the same data\n    for (let i = 0; i < this.docs.length; i++) {\n      const thisDoc = this.docs[i];\n      const otherDoc = other.docs[i];\n\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}