{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isBoolean, isFunction, isNumber, isObject, isString, isUndefined, isAndroid } from '@react-native-firebase/app/lib/common';\nimport { createModuleNamespace, FirebaseModule, getFirebaseRoot } from '@react-native-firebase/app/lib/internal';\nimport FirestoreCollectionReference from './FirestoreCollectionReference';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestorePath from './FirestorePath';\nimport FirestoreQuery from './FirestoreQuery';\nimport FirestoreQueryModifiers from './FirestoreQueryModifiers';\nimport FirestoreStatics from './FirestoreStatics';\nimport FirestoreTransactionHandler from './FirestoreTransactionHandler';\nimport FirestoreWriteBatch from './FirestoreWriteBatch';\nimport version from './version';\nconst namespace = 'firestore';\nconst nativeModuleName = ['RNFBFirestoreModule', 'RNFBFirestoreCollectionModule', 'RNFBFirestoreDocumentModule', 'RNFBFirestoreTransactionModule'];\nconst nativeEvents = ['firestore_collection_sync_event', 'firestore_document_sync_event', 'firestore_transaction_event'];\n\nclass FirebaseFirestoreModule extends FirebaseModule {\n  constructor(app, config) {\n    super(app, config);\n    this._referencePath = new FirestorePath();\n    this._transactionHandler = new FirestoreTransactionHandler(this); // Fan out native events\n\n    this.emitter.addListener(this.eventNameForApp('firestore_collection_sync_event'), event => {\n      this.emitter.emit(this.eventNameForApp(`firestore_collection_sync_event:${event.listenerId}`), event);\n    });\n    this.emitter.addListener(this.eventNameForApp('firestore_document_sync_event'), event => {\n      this.emitter.emit(this.eventNameForApp(`firestore_document_sync_event:${event.listenerId}`), event);\n    });\n    this._settings = {\n      ignoreUndefinedProperties: false\n    };\n  }\n\n  batch() {\n    return new FirestoreWriteBatch(this);\n  }\n\n  loadBundle(bundle) {\n    if (!isString(bundle)) {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a string value.\");\n    }\n\n    if (bundle === '') {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a non-empty string.\");\n    }\n\n    return this.native.loadBundle(bundle);\n  }\n\n  namedQuery(queryName) {\n    if (!isString(queryName)) {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a string value.\");\n    }\n\n    if (queryName === '') {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a non-empty string.\");\n    }\n\n    return new FirestoreQuery(this, this._referencePath, new FirestoreQueryModifiers(), queryName);\n  }\n\n  async clearPersistence() {\n    await this.native.clearPersistence();\n  }\n\n  async waitForPendingWrites() {\n    await this.native.waitForPendingWrites();\n  }\n\n  async terminate() {\n    await this.native.terminate();\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n    }\n\n    let _host = host;\n    const androidBypassEmulatorUrlRemap = typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' && this.firebaseJson.android_bypass_emulator_url_remap;\n\n    if (!androidBypassEmulatorUrlRemap && isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2'; // eslint-disable-next-line no-console\n\n        console.log('Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.');\n      }\n    }\n\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a string value.\");\n    }\n\n    if (collectionPath === '') {\n      throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\");\n    }\n\n    const path = this._referencePath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(\"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\");\n    }\n\n    return new FirestoreCollectionReference(this, path);\n  }\n\n  collectionGroup(collectionId) {\n    if (!isString(collectionId)) {\n      throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\");\n    }\n\n    if (collectionId === '') {\n      throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\");\n    }\n\n    if (collectionId.indexOf('/') >= 0) {\n      throw new Error(\"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\");\n    }\n\n    return new FirestoreQuery(this, this._referencePath.child(collectionId), new FirestoreQueryModifiers().asCollectionGroupQuery(), undefined);\n  }\n\n  async disableNetwork() {\n    await this.native.disableNetwork();\n  }\n\n  doc(documentPath) {\n    if (!isString(documentPath)) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n    }\n\n    if (documentPath === '') {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n    }\n\n    const path = this._referencePath.child(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n    }\n\n    return new FirestoreDocumentReference(this, path);\n  }\n\n  async enableNetwork() {\n    await this.native.enableNetwork();\n  }\n\n  runTransaction(updateFunction) {\n    if (!isFunction(updateFunction)) {\n      return Promise.reject(new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"));\n    }\n\n    return this._transactionHandler._add(updateFunction);\n  }\n\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"));\n    }\n\n    const keys = Object.keys(settings);\n    const opts = ['cacheSizeBytes', 'host', 'persistence', 'ssl', 'ignoreUndefinedProperties', 'serverTimestampBehavior'];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n\n      if (!opts.includes(key)) {\n        return Promise.reject(new Error(`firebase.firestore().settings(*) 'settings.${key}' is not a valid settings field.`));\n      }\n    }\n\n    if (!isUndefined(settings.cacheSizeBytes)) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\"));\n      }\n\n      if (settings.cacheSizeBytes !== FirestoreStatics.CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < 1048576 // 1MB\n      ) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\"));\n      }\n    }\n\n    if (!isUndefined(settings.host)) {\n      // eslint-disable-next-line no-console\n      console.warn('host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.');\n\n      if (!isString(settings.host)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"));\n      }\n\n      if (settings.host === '') {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\"));\n      }\n\n      if (isAndroid) {\n        if (settings.host.startsWith('localhost')) {\n          settings.host = settings.host.replace('localhost', '10.0.2.2'); // eslint-disable-next-line no-console\n\n          console.log('Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n        }\n\n        if (settings.host.startsWith('127.0.0.1')) {\n          settings.host = settings.host.replace('127.0.0.1', '10.0.2.2'); // eslint-disable-next-line no-console\n\n          console.log('Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.');\n        }\n      }\n    }\n\n    if (!isUndefined(settings.persistence) && !isBoolean(settings.persistence)) {\n      return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\"));\n    }\n\n    if (!isUndefined(settings.ssl) && !isBoolean(settings.ssl)) {\n      throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n    }\n\n    if (!isUndefined(settings.serverTimestampBehavior) && !['estimate', 'previous', 'none'].includes(settings.serverTimestampBehavior)) {\n      return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\"));\n    }\n\n    if (!isUndefined(settings.ignoreUndefinedProperties)) {\n      if (!isBoolean(settings.ignoreUndefinedProperties)) {\n        return Promise.reject(new Error(\"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\"));\n      } else {\n        this._settings.ignoreUndefinedProperties = settings.ignoreUndefinedProperties;\n      }\n\n      delete settings.ignoreUndefinedProperties;\n    }\n\n    return this.native.settings(settings);\n  }\n\n} // import { SDK_VERSION } from '@react-native-firebase/firestore';\n\n\nexport const SDK_VERSION = version; // import firestore from '@react-native-firebase/firestore';\n// firestore().X(...);\n\nexport default createModuleNamespace({\n  statics: FirestoreStatics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule\n}); // import firestore, { firebase } from '@react-native-firebase/firestore';\n// firestore().X(...);\n// firebase.firestore().X(...);\n\nexport const firebase = getFirebaseRoot();","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/firestore/lib/index.js"],"names":["isBoolean","isFunction","isNumber","isObject","isString","isUndefined","isAndroid","createModuleNamespace","FirebaseModule","getFirebaseRoot","FirestoreCollectionReference","FirestoreDocumentReference","FirestorePath","FirestoreQuery","FirestoreQueryModifiers","FirestoreStatics","FirestoreTransactionHandler","FirestoreWriteBatch","version","namespace","nativeModuleName","nativeEvents","FirebaseFirestoreModule","constructor","app","config","_referencePath","_transactionHandler","emitter","addListener","eventNameForApp","event","emit","listenerId","_settings","ignoreUndefinedProperties","batch","loadBundle","bundle","Error","native","namedQuery","queryName","clearPersistence","waitForPendingWrites","terminate","useEmulator","host","port","_host","androidBypassEmulatorUrlRemap","firebaseJson","android_bypass_emulator_url_remap","console","log","collection","collectionPath","path","child","isCollection","collectionGroup","collectionId","indexOf","asCollectionGroupQuery","undefined","disableNetwork","doc","documentPath","isDocument","enableNetwork","runTransaction","updateFunction","Promise","reject","_add","settings","keys","Object","opts","i","length","key","includes","cacheSizeBytes","CACHE_SIZE_UNLIMITED","warn","startsWith","replace","persistence","ssl","serverTimestampBehavior","SDK_VERSION","statics","hasMultiAppSupport","hasCustomUrlOrRegionSupport","ModuleClass","firebase"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isAndroid,\n} from '@react-native-firebase/app/lib/common';\nimport {\n  createModuleNamespace,\n  FirebaseModule,\n  getFirebaseRoot,\n} from '@react-native-firebase/app/lib/internal';\nimport FirestoreCollectionReference from './FirestoreCollectionReference';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestorePath from './FirestorePath';\nimport FirestoreQuery from './FirestoreQuery';\nimport FirestoreQueryModifiers from './FirestoreQueryModifiers';\nimport FirestoreStatics from './FirestoreStatics';\nimport FirestoreTransactionHandler from './FirestoreTransactionHandler';\nimport FirestoreWriteBatch from './FirestoreWriteBatch';\nimport version from './version';\n\nconst namespace = 'firestore';\n\nconst nativeModuleName = [\n  'RNFBFirestoreModule',\n  'RNFBFirestoreCollectionModule',\n  'RNFBFirestoreDocumentModule',\n  'RNFBFirestoreTransactionModule',\n];\n\nconst nativeEvents = [\n  'firestore_collection_sync_event',\n  'firestore_document_sync_event',\n  'firestore_transaction_event',\n];\n\nclass FirebaseFirestoreModule extends FirebaseModule {\n  constructor(app, config) {\n    super(app, config);\n    this._referencePath = new FirestorePath();\n    this._transactionHandler = new FirestoreTransactionHandler(this);\n\n    // Fan out native events\n    this.emitter.addListener(this.eventNameForApp('firestore_collection_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_collection_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this.emitter.addListener(this.eventNameForApp('firestore_document_sync_event'), event => {\n      this.emitter.emit(\n        this.eventNameForApp(`firestore_document_sync_event:${event.listenerId}`),\n        event,\n      );\n    });\n\n    this._settings = {\n      ignoreUndefinedProperties: false,\n    };\n  }\n\n  batch() {\n    return new FirestoreWriteBatch(this);\n  }\n\n  loadBundle(bundle) {\n    if (!isString(bundle)) {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a string value.\");\n    }\n\n    if (bundle === '') {\n      throw new Error(\"firebase.firestore().loadBundle(*) 'bundle' must be a non-empty string.\");\n    }\n\n    return this.native.loadBundle(bundle);\n  }\n\n  namedQuery(queryName) {\n    if (!isString(queryName)) {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a string value.\");\n    }\n\n    if (queryName === '') {\n      throw new Error(\"firebase.firestore().namedQuery(*) 'queryName' must be a non-empty string.\");\n    }\n\n    return new FirestoreQuery(this, this._referencePath, new FirestoreQueryModifiers(), queryName);\n  }\n\n  async clearPersistence() {\n    await this.native.clearPersistence();\n  }\n\n  async waitForPendingWrites() {\n    await this.native.waitForPendingWrites();\n  }\n\n  async terminate() {\n    await this.native.terminate();\n  }\n\n  useEmulator(host, port) {\n    if (!host || !isString(host) || !port || !isNumber(port)) {\n      throw new Error('firebase.firestore().useEmulator() takes a non-empty host and port');\n    }\n    let _host = host;\n    const androidBypassEmulatorUrlRemap =\n      typeof this.firebaseJson.android_bypass_emulator_url_remap === 'boolean' &&\n      this.firebaseJson.android_bypass_emulator_url_remap;\n    if (!androidBypassEmulatorUrlRemap && isAndroid && _host) {\n      if (_host === 'localhost' || _host === '127.0.0.1') {\n        _host = '10.0.2.2';\n        // eslint-disable-next-line no-console\n        console.log(\n          'Mapping firestore host to \"10.0.2.2\" for android emulators. Use real IP on real devices. You can bypass this behaviour with \"android_bypass_emulator_url_remap\" flag.',\n        );\n      }\n    }\n    this.native.useEmulator(_host, port);\n    return [_host, port]; // undocumented return, just used to unit test android host remapping\n  }\n\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a string value.\",\n      );\n    }\n\n    if (collectionPath === '') {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must be a non-empty string.\",\n      );\n    }\n\n    const path = this._referencePath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(\n        \"firebase.firestore().collection(*) 'collectionPath' must point to a collection.\",\n      );\n    }\n\n    return new FirestoreCollectionReference(this, path);\n  }\n\n  collectionGroup(collectionId) {\n    if (!isString(collectionId)) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a string value.\",\n      );\n    }\n\n    if (collectionId === '') {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must be a non-empty string.\",\n      );\n    }\n\n    if (collectionId.indexOf('/') >= 0) {\n      throw new Error(\n        \"firebase.firestore().collectionGroup(*) 'collectionId' must not contain '/'.\",\n      );\n    }\n\n    return new FirestoreQuery(\n      this,\n      this._referencePath.child(collectionId),\n      new FirestoreQueryModifiers().asCollectionGroupQuery(),\n      undefined,\n    );\n  }\n\n  async disableNetwork() {\n    await this.native.disableNetwork();\n  }\n\n  doc(documentPath) {\n    if (!isString(documentPath)) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a string value.\");\n    }\n\n    if (documentPath === '') {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must be a non-empty string.\");\n    }\n\n    const path = this._referencePath.child(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error(\"firebase.firestore().doc(*) 'documentPath' must point to a document.\");\n    }\n\n    return new FirestoreDocumentReference(this, path);\n  }\n\n  async enableNetwork() {\n    await this.native.enableNetwork();\n  }\n\n  runTransaction(updateFunction) {\n    if (!isFunction(updateFunction)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().runTransaction(*) 'updateFunction' must be a function.\"),\n      );\n    }\n\n    return this._transactionHandler._add(updateFunction);\n  }\n\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(\n        new Error(\"firebase.firestore().settings(*) 'settings' must be an object.\"),\n      );\n    }\n\n    const keys = Object.keys(settings);\n\n    const opts = [\n      'cacheSizeBytes',\n      'host',\n      'persistence',\n      'ssl',\n      'ignoreUndefinedProperties',\n      'serverTimestampBehavior',\n    ];\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (!opts.includes(key)) {\n        return Promise.reject(\n          new Error(\n            `firebase.firestore().settings(*) 'settings.${key}' is not a valid settings field.`,\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.cacheSizeBytes)) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' must be a number value.\",\n          ),\n        );\n      }\n\n      if (\n        settings.cacheSizeBytes !== FirestoreStatics.CACHE_SIZE_UNLIMITED &&\n        settings.cacheSizeBytes < 1048576 // 1MB\n      ) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.cacheSizeBytes' the minimum cache size is 1048576 bytes (1MB).\",\n          ),\n        );\n      }\n    }\n\n    if (!isUndefined(settings.host)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'host in settings to connect with firestore emulator is deprecated. Use useEmulator instead.',\n      );\n      if (!isString(settings.host)) {\n        return Promise.reject(\n          new Error(\"firebase.firestore().settings(*) 'settings.host' must be a string value.\"),\n        );\n      }\n\n      if (settings.host === '') {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.host' must not be an empty string.\",\n          ),\n        );\n      }\n\n      if (isAndroid) {\n        if (settings.host.startsWith('localhost')) {\n          settings.host = settings.host.replace('localhost', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"localhost\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n        if (settings.host.startsWith('127.0.0.1')) {\n          settings.host = settings.host.replace('127.0.0.1', '10.0.2.2');\n          // eslint-disable-next-line no-console\n          console.log(\n            'Mapping firestore host \"127.0.0.1\" to \"10.0.2.2\" for android emulators. Use real IP on real devices.',\n          );\n        }\n      }\n    }\n\n    if (!isUndefined(settings.persistence) && !isBoolean(settings.persistence)) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.persistence' must be a boolean value.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ssl) && !isBoolean(settings.ssl)) {\n      throw new Error(\"firebase.firestore().settings(*) 'settings.ssl' must be a boolean value.\");\n    }\n\n    if (\n      !isUndefined(settings.serverTimestampBehavior) &&\n      !['estimate', 'previous', 'none'].includes(settings.serverTimestampBehavior)\n    ) {\n      return Promise.reject(\n        new Error(\n          \"firebase.firestore().settings(*) 'settings.serverTimestampBehavior' must be one of 'estimate', 'previous', 'none'.\",\n        ),\n      );\n    }\n\n    if (!isUndefined(settings.ignoreUndefinedProperties)) {\n      if (!isBoolean(settings.ignoreUndefinedProperties)) {\n        return Promise.reject(\n          new Error(\n            \"firebase.firestore().settings(*) 'settings.ignoreUndefinedProperties' must be a boolean value.\",\n          ),\n        );\n      } else {\n        this._settings.ignoreUndefinedProperties = settings.ignoreUndefinedProperties;\n      }\n\n      delete settings.ignoreUndefinedProperties;\n    }\n\n    return this.native.settings(settings);\n  }\n}\n\n// import { SDK_VERSION } from '@react-native-firebase/firestore';\nexport const SDK_VERSION = version;\n\n// import firestore from '@react-native-firebase/firestore';\n// firestore().X(...);\nexport default createModuleNamespace({\n  statics: FirestoreStatics,\n  version,\n  namespace,\n  nativeModuleName,\n  nativeEvents,\n  hasMultiAppSupport: true,\n  hasCustomUrlOrRegionSupport: false,\n  ModuleClass: FirebaseFirestoreModule,\n});\n\n// import firestore, { firebase } from '@react-native-firebase/firestore';\n// firestore().X(...);\n// firebase.firestore().X(...);\nexport const firebase = getFirebaseRoot();\n"]},"metadata":{},"sourceType":"module"}