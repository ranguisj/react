{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common'; // The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n\nconst MIN_SECONDS = -62135596800;\nexport default class FirestoreTimestamp {\n  static now() {\n    return FirestoreTimestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    if (!isDate(date)) {\n      throw new Error(\"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\");\n    }\n\n    return FirestoreTimestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new FirestoreTimestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n\n    if (nanoseconds < 0) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    } // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n\n\n    if (seconds < MIN_SECONDS) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    } // This will break in the year 10,000.\n\n\n    if (seconds >= 253402300800) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  get nanoseconds() {\n    return this._nanoseconds;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreTimestamp)) {\n      throw Error(\"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\");\n    }\n\n    return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this._seconds * 1000 + this._nanoseconds / 1e6;\n  }\n\n  toString() {\n    return `FirestoreTimestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n\n  toJSON() {\n    return {\n      seconds: this.seconds,\n      nanoseconds: this.nanoseconds\n    };\n  }\n  /**\n   * Converts this object to a primitive string, which allows Timestamp objects to be compared\n   * using the `>`, `<=`, `>=` and `>` operators.\n   */\n\n\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS; // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n\n}","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/firestore/lib/FirestoreTimestamp.js"],"names":["isDate","isNumber","MIN_SECONDS","FirestoreTimestamp","now","fromMillis","Date","fromDate","date","Error","getTime","milliseconds","seconds","Math","floor","nanoseconds","constructor","_seconds","_nanoseconds","isEqual","other","toDate","toMillis","toString","toJSON","valueOf","adjustedSeconds","formattedSeconds","String","padStart","formattedNanoseconds"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common';\n\n// The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n\nexport default class FirestoreTimestamp {\n  static now() {\n    return FirestoreTimestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    if (!isDate(date)) {\n      throw new Error(\n        \"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\",\n      );\n    }\n\n    return FirestoreTimestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new FirestoreTimestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n\n    if (nanoseconds < 0) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n    if (seconds < MIN_SECONDS) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  get nanoseconds() {\n    return this._nanoseconds;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreTimestamp)) {\n      throw Error(\n        \"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\",\n      );\n    }\n\n    return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this._seconds * 1000 + this._nanoseconds / 1e6;\n  }\n\n  toString() {\n    return `FirestoreTimestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n\n  toJSON() {\n    return { seconds: this.seconds, nanoseconds: this.nanoseconds };\n  }\n\n  /**\n   * Converts this object to a primitive string, which allows Timestamp objects to be compared\n   * using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is\n    // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded\n    // with zeroes to be a consistent length. Strings with this format then have a lexiographical\n    // ordering that matches the expected ordering. The <seconds> translation is done to avoid\n    // having a leading negative sign (i.e. a leading '-' character) in its string representation,\n    // which would affect its lexiographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}