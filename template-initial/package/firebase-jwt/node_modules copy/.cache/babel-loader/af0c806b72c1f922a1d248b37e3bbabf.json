{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nconst {\n  RNFBAppModule\n} = NativeModules;\n\nclass RNFBNativeEventEmitter extends NativeEventEmitter {\n  constructor() {\n    super(RNFBAppModule);\n    this.ready = false;\n  }\n\n  addListener(eventType, listener, context) {\n    if (!this.ready) {\n      RNFBAppModule.eventsNotifyReady(true);\n      this.ready = true;\n    }\n\n    RNFBAppModule.eventsAddListener(eventType);\n    let subscription = super.addListener(`rnfb_${eventType}`, listener, context); // React Native 0.65+ altered EventEmitter:\n    // - removeSubscription is gone\n    // - addListener returns an unsubscriber instead of a more complex object with eventType etc\n    // make sure eventType for backwards compatibility just in case\n\n    subscription.eventType = `rnfb_${eventType}`; // New style is to return a remove function on the object, just in csae people call that,\n    // we will modify it to do our native unsubscription then call the original\n\n    let originalRemove = subscription.remove;\n\n    let newRemove = () => {\n      RNFBAppModule.eventsRemoveListener(eventType, false);\n\n      if (super.removeSubscription != null) {\n        // This is for RN <= 0.64 - 65 and greater no longer have removeSubscription\n        super.removeSubscription(subscription);\n      } else if (originalRemove != null) {\n        // This is for RN >= 0.65\n        originalRemove();\n      }\n    };\n\n    subscription.remove = newRemove;\n    return subscription;\n  }\n\n  removeAllListeners(eventType) {\n    RNFBAppModule.eventsRemoveListener(eventType, true);\n    super.removeAllListeners(`rnfb_${eventType}`);\n  } // This is likely no longer ever called, but it is here for backwards compatibility with RN <= 0.64\n\n\n  removeSubscription(subscription) {\n    RNFBAppModule.eventsRemoveListener(subscription.eventType.replace('rnfb_'), false);\n\n    if (super.removeSubscription) {\n      super.removeSubscription(subscription);\n    }\n  }\n\n}\n\nexport default new RNFBNativeEventEmitter();","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/app/lib/internal/RNFBNativeEventEmitter.js"],"names":["NativeEventEmitter","NativeModules","RNFBAppModule","RNFBNativeEventEmitter","constructor","ready","addListener","eventType","listener","context","eventsNotifyReady","eventsAddListener","subscription","originalRemove","remove","newRemove","eventsRemoveListener","removeSubscription","removeAllListeners","replace"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,kBAAT,EAA6BC,aAA7B,QAAkD,cAAlD;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,aAA1B;;AAEA,MAAME,sBAAN,SAAqCH,kBAArC,CAAwD;AACtDI,EAAAA,WAAW,GAAG;AACZ,UAAMF,aAAN;AACA,SAAKG,KAAL,GAAa,KAAb;AACD;;AAEDC,EAAAA,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,OAAtB,EAA+B;AACxC,QAAI,CAAC,KAAKJ,KAAV,EAAiB;AACfH,MAAAA,aAAa,CAACQ,iBAAd,CAAgC,IAAhC;AACA,WAAKL,KAAL,GAAa,IAAb;AACD;;AACDH,IAAAA,aAAa,CAACS,iBAAd,CAAgCJ,SAAhC;AAEA,QAAIK,YAAY,GAAG,MAAMN,WAAN,CAAmB,QAAOC,SAAU,EAApC,EAAuCC,QAAvC,EAAiDC,OAAjD,CAAnB,CAPwC,CASxC;AACA;AACA;AAEA;;AACAG,IAAAA,YAAY,CAACL,SAAb,GAA0B,QAAOA,SAAU,EAA3C,CAdwC,CAgBxC;AACA;;AACA,QAAIM,cAAc,GAAGD,YAAY,CAACE,MAAlC;;AACA,QAAIC,SAAS,GAAG,MAAM;AACpBb,MAAAA,aAAa,CAACc,oBAAd,CAAmCT,SAAnC,EAA8C,KAA9C;;AACA,UAAI,MAAMU,kBAAN,IAA4B,IAAhC,EAAsC;AACpC;AACA,cAAMA,kBAAN,CAAyBL,YAAzB;AACD,OAHD,MAGO,IAAIC,cAAc,IAAI,IAAtB,EAA4B;AACjC;AACAA,QAAAA,cAAc;AACf;AACF,KATD;;AAUAD,IAAAA,YAAY,CAACE,MAAb,GAAsBC,SAAtB;AACA,WAAOH,YAAP;AACD;;AAEDM,EAAAA,kBAAkB,CAACX,SAAD,EAAY;AAC5BL,IAAAA,aAAa,CAACc,oBAAd,CAAmCT,SAAnC,EAA8C,IAA9C;AACA,UAAMW,kBAAN,CAA0B,QAAOX,SAAU,EAA3C;AACD,GA1CqD,CA4CtD;;;AACAU,EAAAA,kBAAkB,CAACL,YAAD,EAAe;AAC/BV,IAAAA,aAAa,CAACc,oBAAd,CAAmCJ,YAAY,CAACL,SAAb,CAAuBY,OAAvB,CAA+B,OAA/B,CAAnC,EAA4E,KAA5E;;AACA,QAAI,MAAMF,kBAAV,EAA8B;AAC5B,YAAMA,kBAAN,CAAyBL,YAAzB;AACD;AACF;;AAlDqD;;AAqDxD,eAAe,IAAIT,sBAAJ,EAAf","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst { RNFBAppModule } = NativeModules;\n\nclass RNFBNativeEventEmitter extends NativeEventEmitter {\n  constructor() {\n    super(RNFBAppModule);\n    this.ready = false;\n  }\n\n  addListener(eventType, listener, context) {\n    if (!this.ready) {\n      RNFBAppModule.eventsNotifyReady(true);\n      this.ready = true;\n    }\n    RNFBAppModule.eventsAddListener(eventType);\n\n    let subscription = super.addListener(`rnfb_${eventType}`, listener, context);\n\n    // React Native 0.65+ altered EventEmitter:\n    // - removeSubscription is gone\n    // - addListener returns an unsubscriber instead of a more complex object with eventType etc\n\n    // make sure eventType for backwards compatibility just in case\n    subscription.eventType = `rnfb_${eventType}`;\n\n    // New style is to return a remove function on the object, just in csae people call that,\n    // we will modify it to do our native unsubscription then call the original\n    let originalRemove = subscription.remove;\n    let newRemove = () => {\n      RNFBAppModule.eventsRemoveListener(eventType, false);\n      if (super.removeSubscription != null) {\n        // This is for RN <= 0.64 - 65 and greater no longer have removeSubscription\n        super.removeSubscription(subscription);\n      } else if (originalRemove != null) {\n        // This is for RN >= 0.65\n        originalRemove();\n      }\n    };\n    subscription.remove = newRemove;\n    return subscription;\n  }\n\n  removeAllListeners(eventType) {\n    RNFBAppModule.eventsRemoveListener(eventType, true);\n    super.removeAllListeners(`rnfb_${eventType}`);\n  }\n\n  // This is likely no longer ever called, but it is here for backwards compatibility with RN <= 0.64\n  removeSubscription(subscription) {\n    RNFBAppModule.eventsRemoveListener(subscription.eventType.replace('rnfb_'), false);\n    if (super.removeSubscription) {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nexport default new RNFBNativeEventEmitter();\n"]},"metadata":{},"sourceType":"module"}