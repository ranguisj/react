{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { NativeModules, Platform } from 'react-native';\nimport { APP_NATIVE_MODULE } from '../constants';\nimport NativeFirebaseError from '../NativeFirebaseError';\nimport RNFBNativeEventEmitter from '../RNFBNativeEventEmitter';\nimport SharedEventEmitter from '../SharedEventEmitter';\nconst NATIVE_MODULE_REGISTRY = {};\nconst NATIVE_MODULE_EVENT_SUBSCRIPTIONS = {};\n\nfunction nativeModuleKey(module) {\n  return `${module._customUrlOrRegion || ''}:${module.app.name}:${module._config.namespace}`;\n}\n/**\n * Wraps a native module method to provide\n * auto prepended args and custom Error classes.\n *\n * @param namespace\n * @param method\n * @param argToPrepend\n * @returns {Function}\n */\n\n\nfunction nativeModuleMethodWrapped(namespace, method, argToPrepend) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const possiblePromise = method(...[...argToPrepend, ...args]);\n\n    if (possiblePromise && possiblePromise.then) {\n      const jsStack = new Error().stack;\n      return possiblePromise.catch(nativeError => Promise.reject(new NativeFirebaseError(nativeError, jsStack, namespace)));\n    }\n\n    return possiblePromise;\n  };\n}\n/**\n * Prepends all arguments in prependArgs to all native method calls\n *\n * @param namespace\n * @param NativeModule\n * @param argToPrepend\n */\n\n\nfunction nativeModuleWrapped(namespace, NativeModule, argToPrepend) {\n  const native = {};\n\n  if (!NativeModule) {\n    return NativeModule;\n  }\n\n  const properties = Object.keys(NativeModule);\n\n  for (let i = 0, len = properties.length; i < len; i++) {\n    const property = properties[i];\n\n    if (typeof NativeModule[property] === 'function') {\n      native[property] = nativeModuleMethodWrapped(namespace, NativeModule[property], argToPrepend);\n    } else {\n      native[property] = NativeModule[property];\n    }\n  }\n\n  return native;\n}\n/**\n * Initialises and wraps all the native module methods.\n *\n * @param module\n * @returns {*}\n */\n\n\nfunction initialiseNativeModule(module) {\n  const config = module._config;\n  const key = nativeModuleKey(module);\n  const {\n    namespace,\n    nativeEvents,\n    nativeModuleName,\n    hasMultiAppSupport,\n    hasCustomUrlOrRegionSupport,\n    disablePrependCustomUrlOrRegion\n  } = config;\n  const multiModuleRoot = {};\n  const multiModule = Array.isArray(nativeModuleName);\n  const nativeModuleNames = multiModule ? nativeModuleName : [nativeModuleName];\n\n  for (let i = 0; i < nativeModuleNames.length; i++) {\n    const nativeModule = NativeModules[nativeModuleNames[i]]; // only error if there's a single native module\n    // as multi modules can mean some are optional\n\n    if (!multiModule && !nativeModule) {\n      throw new Error(getMissingModuleHelpText(namespace));\n    }\n\n    if (multiModule) {\n      multiModuleRoot[nativeModuleNames[i]] = !!nativeModule;\n    }\n\n    const argToPrepend = [];\n\n    if (hasMultiAppSupport) {\n      argToPrepend.push(module.app.name);\n    }\n\n    if (hasCustomUrlOrRegionSupport && !disablePrependCustomUrlOrRegion) {\n      argToPrepend.push(module._customUrlOrRegion);\n    }\n\n    Object.assign(multiModuleRoot, nativeModuleWrapped(namespace, nativeModule, argToPrepend));\n  }\n\n  if (nativeEvents && nativeEvents.length) {\n    for (let i = 0, len = nativeEvents.length; i < len; i++) {\n      subscribeToNativeModuleEvent(nativeEvents[i]);\n    }\n  }\n\n  Object.freeze(multiModuleRoot);\n  NATIVE_MODULE_REGISTRY[key] = multiModuleRoot;\n  return NATIVE_MODULE_REGISTRY[key];\n}\n/**\n * Subscribe to a native event for js side distribution by appName\n *    React Native events are hard set at compile - cant do dynamic event names\n *    so we use a single event send it to js and js then internally can prefix it\n *    and distribute dynamically.\n *\n * @param eventName\n * @private\n */\n\n\nfunction subscribeToNativeModuleEvent(eventName) {\n  if (!NATIVE_MODULE_EVENT_SUBSCRIPTIONS[eventName]) {\n    RNFBNativeEventEmitter.addListener(eventName, event => {\n      if (event.appName) {\n        // native event has an appName property - auto prefix and internally emit\n        SharedEventEmitter.emit(`${event.appName}-${eventName}`, event);\n      } else {\n        // standard event - no need to prefix\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n    NATIVE_MODULE_EVENT_SUBSCRIPTIONS[eventName] = true;\n  }\n}\n/**\n * Help text for integrating the native counter parts for each firebase module.\n *\n * @param namespace\n * @returns {string}\n */\n\n\nfunction getMissingModuleHelpText(namespace) {\n  const snippet = `firebase.${namespace}()`;\n  const nativeModule = namespace.charAt(0).toUpperCase() + namespace.slice(1);\n\n  if (Platform.OS === 'ios') {\n    return `You attempted to use a firebase module that's not installed natively on your iOS project by calling ${snippet}.` + '\\r\\n\\r\\nEnsure you have either linked the module or added it to your projects Podfile.' + '\\r\\n\\r\\nSee http://invertase.link/ios for full setup instructions.';\n  }\n\n  const rnFirebasePackage = `'io.invertase.firebase.${namespace}.ReactNativeFirebase${nativeModule}Package'`;\n  const newInstance = `'new ReactNativeFirebase${nativeModule}Package()'`;\n  return `You attempted to use a firebase module that's not installed on your Android project by calling ${snippet}.` + `\\r\\n\\r\\nEnsure you have:\\r\\n\\r\\n1) imported the ${rnFirebasePackage} module in your 'MainApplication.java' file.\\r\\n\\r\\n2) Added the ` + `${newInstance} line inside of the RN 'getPackages()' method list.` + '\\r\\n\\r\\nSee http://invertase.link/android for full setup instructions.';\n}\n/**\n * Gets a wrapped native module instance for the provided firebase module.\n * Will attempt to create a new instance if non previously created.\n *\n * @param module\n * @returns {*}\n */\n\n\nexport function getNativeModule(module) {\n  const key = nativeModuleKey(module);\n\n  if (NATIVE_MODULE_REGISTRY[key]) {\n    return NATIVE_MODULE_REGISTRY[key];\n  }\n\n  return initialiseNativeModule(module);\n}\n/**\n * Custom wrapped app module as it does not have it's own FirebaseModule based class.\n *\n * @returns {*}\n */\n\nexport function getAppModule() {\n  if (NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE]) {\n    return NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE];\n  }\n\n  const namespace = 'app';\n  const nativeModule = NativeModules[APP_NATIVE_MODULE];\n\n  if (!nativeModule) {\n    throw new Error(getMissingModuleHelpText(namespace));\n  }\n\n  NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE] = nativeModuleWrapped(namespace, nativeModule, []);\n  return NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE];\n}","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/app/lib/internal/registry/nativeModule.js"],"names":["NativeModules","Platform","APP_NATIVE_MODULE","NativeFirebaseError","RNFBNativeEventEmitter","SharedEventEmitter","NATIVE_MODULE_REGISTRY","NATIVE_MODULE_EVENT_SUBSCRIPTIONS","nativeModuleKey","module","_customUrlOrRegion","app","name","_config","namespace","nativeModuleMethodWrapped","method","argToPrepend","args","possiblePromise","then","jsStack","Error","stack","catch","nativeError","Promise","reject","nativeModuleWrapped","NativeModule","native","properties","Object","keys","i","len","length","property","initialiseNativeModule","config","key","nativeEvents","nativeModuleName","hasMultiAppSupport","hasCustomUrlOrRegionSupport","disablePrependCustomUrlOrRegion","multiModuleRoot","multiModule","Array","isArray","nativeModuleNames","nativeModule","getMissingModuleHelpText","push","assign","subscribeToNativeModuleEvent","freeze","eventName","addListener","event","appName","emit","snippet","charAt","toUpperCase","slice","OS","rnFirebasePackage","newInstance","getNativeModule","getAppModule"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { NativeModules, Platform } from 'react-native';\nimport { APP_NATIVE_MODULE } from '../constants';\nimport NativeFirebaseError from '../NativeFirebaseError';\nimport RNFBNativeEventEmitter from '../RNFBNativeEventEmitter';\nimport SharedEventEmitter from '../SharedEventEmitter';\n\nconst NATIVE_MODULE_REGISTRY = {};\nconst NATIVE_MODULE_EVENT_SUBSCRIPTIONS = {};\n\nfunction nativeModuleKey(module) {\n  return `${module._customUrlOrRegion || ''}:${module.app.name}:${module._config.namespace}`;\n}\n\n/**\n * Wraps a native module method to provide\n * auto prepended args and custom Error classes.\n *\n * @param namespace\n * @param method\n * @param argToPrepend\n * @returns {Function}\n */\nfunction nativeModuleMethodWrapped(namespace, method, argToPrepend) {\n  return (...args) => {\n    const possiblePromise = method(...[...argToPrepend, ...args]);\n\n    if (possiblePromise && possiblePromise.then) {\n      const jsStack = new Error().stack;\n      return possiblePromise.catch(nativeError =>\n        Promise.reject(new NativeFirebaseError(nativeError, jsStack, namespace)),\n      );\n    }\n\n    return possiblePromise;\n  };\n}\n\n/**\n * Prepends all arguments in prependArgs to all native method calls\n *\n * @param namespace\n * @param NativeModule\n * @param argToPrepend\n */\nfunction nativeModuleWrapped(namespace, NativeModule, argToPrepend) {\n  const native = {};\n  if (!NativeModule) {\n    return NativeModule;\n  }\n\n  const properties = Object.keys(NativeModule);\n\n  for (let i = 0, len = properties.length; i < len; i++) {\n    const property = properties[i];\n    if (typeof NativeModule[property] === 'function') {\n      native[property] = nativeModuleMethodWrapped(namespace, NativeModule[property], argToPrepend);\n    } else {\n      native[property] = NativeModule[property];\n    }\n  }\n\n  return native;\n}\n\n/**\n * Initialises and wraps all the native module methods.\n *\n * @param module\n * @returns {*}\n */\nfunction initialiseNativeModule(module) {\n  const config = module._config;\n  const key = nativeModuleKey(module);\n  const {\n    namespace,\n    nativeEvents,\n    nativeModuleName,\n    hasMultiAppSupport,\n    hasCustomUrlOrRegionSupport,\n    disablePrependCustomUrlOrRegion,\n  } = config;\n  const multiModuleRoot = {};\n  const multiModule = Array.isArray(nativeModuleName);\n  const nativeModuleNames = multiModule ? nativeModuleName : [nativeModuleName];\n\n  for (let i = 0; i < nativeModuleNames.length; i++) {\n    const nativeModule = NativeModules[nativeModuleNames[i]];\n\n    // only error if there's a single native module\n    // as multi modules can mean some are optional\n    if (!multiModule && !nativeModule) {\n      throw new Error(getMissingModuleHelpText(namespace));\n    }\n\n    if (multiModule) {\n      multiModuleRoot[nativeModuleNames[i]] = !!nativeModule;\n    }\n\n    const argToPrepend = [];\n\n    if (hasMultiAppSupport) {\n      argToPrepend.push(module.app.name);\n    }\n\n    if (hasCustomUrlOrRegionSupport && !disablePrependCustomUrlOrRegion) {\n      argToPrepend.push(module._customUrlOrRegion);\n    }\n\n    Object.assign(multiModuleRoot, nativeModuleWrapped(namespace, nativeModule, argToPrepend));\n  }\n\n  if (nativeEvents && nativeEvents.length) {\n    for (let i = 0, len = nativeEvents.length; i < len; i++) {\n      subscribeToNativeModuleEvent(nativeEvents[i]);\n    }\n  }\n\n  Object.freeze(multiModuleRoot);\n\n  NATIVE_MODULE_REGISTRY[key] = multiModuleRoot;\n\n  return NATIVE_MODULE_REGISTRY[key];\n}\n\n/**\n * Subscribe to a native event for js side distribution by appName\n *    React Native events are hard set at compile - cant do dynamic event names\n *    so we use a single event send it to js and js then internally can prefix it\n *    and distribute dynamically.\n *\n * @param eventName\n * @private\n */\nfunction subscribeToNativeModuleEvent(eventName) {\n  if (!NATIVE_MODULE_EVENT_SUBSCRIPTIONS[eventName]) {\n    RNFBNativeEventEmitter.addListener(eventName, event => {\n      if (event.appName) {\n        // native event has an appName property - auto prefix and internally emit\n        SharedEventEmitter.emit(`${event.appName}-${eventName}`, event);\n      } else {\n        // standard event - no need to prefix\n        SharedEventEmitter.emit(eventName, event);\n      }\n    });\n\n    NATIVE_MODULE_EVENT_SUBSCRIPTIONS[eventName] = true;\n  }\n}\n\n/**\n * Help text for integrating the native counter parts for each firebase module.\n *\n * @param namespace\n * @returns {string}\n */\nfunction getMissingModuleHelpText(namespace) {\n  const snippet = `firebase.${namespace}()`;\n  const nativeModule = namespace.charAt(0).toUpperCase() + namespace.slice(1);\n\n  if (Platform.OS === 'ios') {\n    return (\n      `You attempted to use a firebase module that's not installed natively on your iOS project by calling ${snippet}.` +\n      '\\r\\n\\r\\nEnsure you have either linked the module or added it to your projects Podfile.' +\n      '\\r\\n\\r\\nSee http://invertase.link/ios for full setup instructions.'\n    );\n  }\n\n  const rnFirebasePackage = `'io.invertase.firebase.${namespace}.ReactNativeFirebase${nativeModule}Package'`;\n  const newInstance = `'new ReactNativeFirebase${nativeModule}Package()'`;\n\n  return (\n    `You attempted to use a firebase module that's not installed on your Android project by calling ${snippet}.` +\n    `\\r\\n\\r\\nEnsure you have:\\r\\n\\r\\n1) imported the ${rnFirebasePackage} module in your 'MainApplication.java' file.\\r\\n\\r\\n2) Added the ` +\n    `${newInstance} line inside of the RN 'getPackages()' method list.` +\n    '\\r\\n\\r\\nSee http://invertase.link/android for full setup instructions.'\n  );\n}\n\n/**\n * Gets a wrapped native module instance for the provided firebase module.\n * Will attempt to create a new instance if non previously created.\n *\n * @param module\n * @returns {*}\n */\nexport function getNativeModule(module) {\n  const key = nativeModuleKey(module);\n\n  if (NATIVE_MODULE_REGISTRY[key]) {\n    return NATIVE_MODULE_REGISTRY[key];\n  }\n\n  return initialiseNativeModule(module);\n}\n\n/**\n * Custom wrapped app module as it does not have it's own FirebaseModule based class.\n *\n * @returns {*}\n */\nexport function getAppModule() {\n  if (NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE]) {\n    return NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE];\n  }\n\n  const namespace = 'app';\n  const nativeModule = NativeModules[APP_NATIVE_MODULE];\n\n  if (!nativeModule) {\n    throw new Error(getMissingModuleHelpText(namespace));\n  }\n\n  NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE] = nativeModuleWrapped(namespace, nativeModule, []);\n\n  return NATIVE_MODULE_REGISTRY[APP_NATIVE_MODULE];\n}\n"]},"metadata":{},"sourceType":"module"}