{"ast":null,"code":"import { verify, sign } from '../components/jwt/Jwt';\nimport mock from './mock';\n\nconst fakeRequest = time => {\n  return new Promise(res => setTimeout(res, time));\n}; // ----------------------------------------------------------------------\n\n\nconst JWT_SECRET = 'wrap-secret-key';\nconst JWT_EXPIRES_IN = '2 days';\nconst users = [{\n  id: '8864c717-587d-472a-929a-8e5f298024da-0',\n  displayName: 'Demo React',\n  email: 'demo@demo.com',\n  password: 'demo123',\n  phoneNumber: '+91 2166555',\n  country: 'India',\n  address: 'Khao galli',\n  state: 'Delhi',\n  city: 'Delhi',\n  zipCode: '94116',\n  about: 'Lorem ipsum hasellus viverra nulla ut metus varius laoreet. Phasellus tempus.',\n  role: 'admin',\n  isPublic: true\n}]; // ----------------------------------------------------------------------\n\nmock.onPost('/api/account/login').reply(async config => {\n  try {\n    await fakeRequest(1000);\n    const {\n      email,\n      password\n    } = JSON.parse(config.data);\n    const user = users.find(_user => _user.email === email);\n\n    if (!user) {\n      return [400, {\n        message: 'There is no user corresponding to the email address.'\n      }];\n    }\n\n    if (user.password !== password) {\n      return [400, {\n        message: 'Wrong password'\n      }];\n    }\n\n    const accessToken = sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_EXPIRES_IN\n    });\n    return [200, {\n      accessToken,\n      user\n    }];\n  } catch (error) {\n    console.error(error);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n}); // ----------------------------------------------------------------------\n\nmock.onPost('/api/account/register').reply(async config => {\n  try {\n    await fakeRequest(1000);\n    const {\n      email,\n      password\n    } = JSON.parse(config.data);\n    let user = users.find(_user => _user.email === email);\n    const uid = new Date().toISOString();\n\n    if (user) {\n      return [400, {\n        message: 'There already exists an account with the given email address.'\n      }];\n    }\n\n    user = {\n      id: uid,\n      displayName: `${email}`,\n      email,\n      password,\n      phoneNumber: null,\n      country: null,\n      address: null,\n      state: null,\n      city: null,\n      zipCode: null,\n      about: null,\n      role: 'user',\n      isPublic: true\n    };\n    const accessToken = sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_EXPIRES_IN\n    });\n    return [200, {\n      accessToken,\n      user\n    }];\n  } catch (error) {\n    console.error(error);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n}); // ----------------------------------------------------------------------\n\nmock.onGet('/api/account/my-account').reply(config => {\n  try {\n    const {\n      Authorization\n    } = config.headers;\n\n    if (!Authorization) {\n      return [401, {\n        message: 'Authorization token missing'\n      }];\n    }\n\n    const accessToken = Authorization.split(' ')[1];\n    const data = verify(accessToken, JWT_SECRET);\n    const userId = typeof data === 'object' ? data === null || data === void 0 ? void 0 : data.userId : '';\n    const user = users.find(_user => _user.id === userId);\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid authorization token'\n      }];\n    }\n\n    return [200, {\n      user\n    }];\n  } catch (error) {\n    console.error(error);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/src/_apis_/account.js"],"names":["verify","sign","mock","fakeRequest","time","Promise","res","setTimeout","JWT_SECRET","JWT_EXPIRES_IN","users","id","displayName","email","password","phoneNumber","country","address","state","city","zipCode","about","role","isPublic","onPost","reply","config","JSON","parse","data","user","find","_user","message","accessToken","userId","expiresIn","error","console","uid","Date","toISOString","onGet","Authorization","headers","split"],"mappings":"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","sourcesContent":["import { verify, sign } from '../components/jwt/Jwt';\r\nimport mock from './mock';\r\n\r\nconst fakeRequest = (time) => {\r\n  return new Promise((res) => setTimeout(res, time));\r\n};\r\n// ----------------------------------------------------------------------\r\n\r\nconst JWT_SECRET = 'wrap-secret-key';\r\nconst JWT_EXPIRES_IN = '2 days';\r\n\r\nconst users = [\r\n  {\r\n    id: '8864c717-587d-472a-929a-8e5f298024da-0',\r\n    displayName: 'Demo React',\r\n    email: 'demo@demo.com',\r\n    password: 'demo123',\r\n    phoneNumber: '+91 2166555',\r\n    country: 'India',\r\n    address: 'Khao galli',\r\n    state: 'Delhi',\r\n    city: 'Delhi',\r\n    zipCode: '94116',\r\n    about: 'Lorem ipsum hasellus viverra nulla ut metus varius laoreet. Phasellus tempus.',\r\n    role: 'admin',\r\n    isPublic: true,\r\n  },\r\n];\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nmock.onPost('/api/account/login').reply(async (config) => {\r\n  try {\r\n    await fakeRequest(1000);\r\n\r\n    const { email, password } = JSON.parse(config.data);\r\n    const user = users.find((_user) => _user.email === email);\r\n\r\n    if (!user) {\r\n      return [400, { message: 'There is no user corresponding to the email address.' }];\r\n    }\r\n\r\n    if (user.password !== password) {\r\n      return [400, { message: 'Wrong password' }];\r\n    }\r\n\r\n    const accessToken = sign({ userId: user.id }, JWT_SECRET, {\r\n      expiresIn: JWT_EXPIRES_IN,\r\n    });\r\n\r\n    return [200, { accessToken, user }];\r\n  } catch (error) {\r\n    console.error(error);\r\n    return [500, { message: 'Internal server error' }];\r\n  }\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nmock.onPost('/api/account/register').reply(async (config) => {\r\n  try {\r\n    await fakeRequest(1000);\r\n\r\n    const { email, password } = JSON.parse(config.data);\r\n    let user = users.find((_user) => _user.email === email);\r\n    const uid = new Date().toISOString();\r\n\r\n    if (user) {\r\n      return [400, { message: 'There already exists an account with the given email address.' }];\r\n    }\r\n\r\n    user = {\r\n      id: uid,\r\n      displayName: `${email}`,\r\n      email,\r\n      password,\r\n      phoneNumber: null,\r\n      country: null,\r\n      address: null,\r\n      state: null,\r\n      city: null,\r\n      zipCode: null,\r\n      about: null,\r\n      role: 'user',\r\n      isPublic: true,\r\n    };\r\n\r\n    const accessToken = sign({ userId: user.id }, JWT_SECRET, {\r\n      expiresIn: JWT_EXPIRES_IN,\r\n    });\r\n\r\n    return [200, { accessToken, user }];\r\n  } catch (error) {\r\n    console.error(error);\r\n    return [500, { message: 'Internal server error' }];\r\n  }\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nmock.onGet('/api/account/my-account').reply((config) => {\r\n  try {\r\n    const { Authorization } = config.headers;\r\n\r\n    if (!Authorization) {\r\n      return [401, { message: 'Authorization token missing' }];\r\n    }\r\n\r\n    const accessToken = Authorization.split(' ')[1];\r\n    const data = verify(accessToken, JWT_SECRET);\r\n    const userId = typeof data === 'object' ? data?.userId : '';\r\n    const user = users.find((_user) => _user.id === userId);\r\n\r\n    if (!user) {\r\n      return [401, { message: 'Invalid authorization token' }];\r\n    }\r\n\r\n    return [200, { user }];\r\n  } catch (error) {\r\n    console.error(error);\r\n    return [500, { message: 'Internal server error' }];\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}