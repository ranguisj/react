{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isIOS, isNull, isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport FirebaseApp from '../../FirebaseApp';\nimport { DEFAULT_APP_NAME } from '../constants';\nimport { getAppModule } from './nativeModule';\nconst APP_REGISTRY = {};\nlet onAppCreateFn = null;\nlet onAppDestroyFn = null;\nlet initializedNativeApps = false;\n/**\n * This was needed to avoid metro require cycles...\n * @param fn\n */\n\nexport function setOnAppCreate(fn) {\n  onAppCreateFn = fn;\n}\n/**\n * This was needed to avoid metro require cycles...\n * @param fn\n */\n\nexport function setOnAppDestroy(fn) {\n  onAppDestroyFn = fn;\n}\n/**\n * Initializes all apps that were created natively (android/ios),\n * e.g. the Default firebase app from plist/json google services file.\n */\n\nexport function initializeNativeApps() {\n  const nativeModule = getAppModule();\n  const {\n    NATIVE_FIREBASE_APPS\n  } = nativeModule;\n\n  if (NATIVE_FIREBASE_APPS && NATIVE_FIREBASE_APPS.length) {\n    for (let i = 0; i < NATIVE_FIREBASE_APPS.length; i++) {\n      const {\n        appConfig,\n        options\n      } = NATIVE_FIREBASE_APPS[i];\n      const {\n        name\n      } = appConfig;\n      APP_REGISTRY[name] = new FirebaseApp(options, appConfig, true, deleteApp.bind(null, name, true));\n      onAppCreateFn(APP_REGISTRY[name]);\n    }\n  }\n\n  initializedNativeApps = true;\n}\n/**\n * Get an app by name; or the default app.\n *\n * On first call of this method it will initialize any\n * natively created apps in JS. This makes this 'lazy load'.\n *\n * @param name\n */\n\nexport function getApp() {\n  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_APP_NAME;\n\n  if (!initializedNativeApps) {\n    initializeNativeApps();\n  }\n\n  const app = APP_REGISTRY[name];\n\n  if (!app) {\n    throw new Error(`No Firebase App '${name}' has been created - call firebase.initializeApp()`);\n  }\n\n  return app;\n}\n/**\n * Gets all app instances, used for `firebase.apps`\n */\n\nexport function getApps() {\n  if (!initializedNativeApps) {\n    initializeNativeApps();\n  }\n\n  return Object.values(APP_REGISTRY);\n}\n/**\n *\n * @param options\n * @param configOrName\n */\n\nexport function initializeApp() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let configOrName = arguments.length > 1 ? arguments[1] : undefined;\n  let appConfig = configOrName;\n\n  if (!isObject(configOrName) || isNull(configOrName)) {\n    appConfig = {\n      name: configOrName,\n      automaticResourceManagement: false,\n      automaticDataCollectionEnabled: true\n    };\n  }\n\n  if (isUndefined(appConfig.name)) {\n    appConfig.name = DEFAULT_APP_NAME;\n  }\n\n  const {\n    name\n  } = appConfig;\n\n  if (!name || !isString(name)) {\n    return Promise.reject(new Error(`Illegal App name: '${name}'`));\n  }\n\n  if (APP_REGISTRY[name]) {\n    return Promise.reject(new Error(`Firebase App named '${name}' already exists`));\n  } // VALIDATE OPTIONS\n\n\n  if (!isObject(options)) {\n    return Promise.reject(new Error(`firebase.initializeApp(options, <- expects an Object but got '${typeof options}'`));\n  }\n\n  if (!isString(options.apiKey)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'apiKey'.\"));\n  }\n\n  if (!isString(options.appId)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'appId'.\"));\n  } // TODO - make required only if database module exists - init app on native ios&android needs changing also\n\n\n  if (!isString(options.databaseURL)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'databaseURL'.\"));\n  } // TODO - make required only if messaging/notifications module exists - init app on native ios&android needs changing also\n\n\n  if (!isString(options.messagingSenderId)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'messagingSenderId'.\"));\n  }\n\n  if (!isString(options.projectId)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'projectId'.\"));\n  } // TODO - make required only if database module exists - init app on native ios&android needs changing also\n\n\n  if (!isString(options.storageBucket)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'storageBucket'.\"));\n  }\n\n  const app = new FirebaseApp(options, {\n    name\n  }, false, deleteApp.bind(null, name, true)); // Note these initialization actions with side effects are performed prior to knowledge of\n  // successful initialization in the native code. Native code *may* throw an error.\n\n  APP_REGISTRY[name] = app;\n  onAppCreateFn(APP_REGISTRY[name]);\n  return getAppModule().initializeApp(options, {\n    name\n  }).then(() => {\n    app._initialized = true;\n    return app;\n  }).catch(e => {\n    // we need to clean the app entry from registry as the app does not actually exist\n    // There are still possible side effects from `onAppCreateFn` to consider but as existing\n    // code may rely on that function running prior to native create, re-ordering it is a semantic change\n    // and will be avoided\n    delete APP_REGISTRY[name]; // Now allow calling code to handle the initialization issue\n\n    throw e;\n  });\n}\nexport function setLogLevel(logLevel) {\n  if (!['error', 'warn', 'info', 'debug', 'verbose'].includes(logLevel)) {\n    throw new Error('LogLevel must be one of \"error\", \"warn\", \"info\", \"debug\", \"verbose\"');\n  }\n\n  if (isIOS) {\n    getAppModule().setLogLevel(logLevel);\n  }\n}\n/**\n *\n */\n\nexport function deleteApp(name, nativeInitialized) {\n  if (name === DEFAULT_APP_NAME && nativeInitialized) {\n    return Promise.reject(new Error('Unable to delete the default native firebase app instance.'));\n  }\n\n  const app = APP_REGISTRY[name];\n  const nativeModule = getAppModule();\n  return nativeModule.deleteApp(name).then(() => {\n    app._deleted = true;\n    onAppDestroyFn(app);\n    delete APP_REGISTRY[name];\n  });\n}","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/app/lib/internal/registry/app.js"],"names":["isIOS","isNull","isObject","isString","isUndefined","FirebaseApp","DEFAULT_APP_NAME","getAppModule","APP_REGISTRY","onAppCreateFn","onAppDestroyFn","initializedNativeApps","setOnAppCreate","fn","setOnAppDestroy","initializeNativeApps","nativeModule","NATIVE_FIREBASE_APPS","length","i","appConfig","options","name","deleteApp","bind","getApp","app","Error","getApps","Object","values","initializeApp","configOrName","automaticResourceManagement","automaticDataCollectionEnabled","Promise","reject","apiKey","appId","databaseURL","messagingSenderId","projectId","storageBucket","then","_initialized","catch","e","setLogLevel","logLevel","includes","nativeInitialized","_deleted"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isIOS,\n  isNull,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirebaseApp from '../../FirebaseApp';\nimport { DEFAULT_APP_NAME } from '../constants';\nimport { getAppModule } from './nativeModule';\n\nconst APP_REGISTRY = {};\nlet onAppCreateFn = null;\nlet onAppDestroyFn = null;\nlet initializedNativeApps = false;\n\n/**\n * This was needed to avoid metro require cycles...\n * @param fn\n */\nexport function setOnAppCreate(fn) {\n  onAppCreateFn = fn;\n}\n\n/**\n * This was needed to avoid metro require cycles...\n * @param fn\n */\nexport function setOnAppDestroy(fn) {\n  onAppDestroyFn = fn;\n}\n\n/**\n * Initializes all apps that were created natively (android/ios),\n * e.g. the Default firebase app from plist/json google services file.\n */\nexport function initializeNativeApps() {\n  const nativeModule = getAppModule();\n  const { NATIVE_FIREBASE_APPS } = nativeModule;\n\n  if (NATIVE_FIREBASE_APPS && NATIVE_FIREBASE_APPS.length) {\n    for (let i = 0; i < NATIVE_FIREBASE_APPS.length; i++) {\n      const { appConfig, options } = NATIVE_FIREBASE_APPS[i];\n      const { name } = appConfig;\n      APP_REGISTRY[name] = new FirebaseApp(\n        options,\n        appConfig,\n        true,\n        deleteApp.bind(null, name, true),\n      );\n      onAppCreateFn(APP_REGISTRY[name]);\n    }\n  }\n\n  initializedNativeApps = true;\n}\n\n/**\n * Get an app by name; or the default app.\n *\n * On first call of this method it will initialize any\n * natively created apps in JS. This makes this 'lazy load'.\n *\n * @param name\n */\nexport function getApp(name = DEFAULT_APP_NAME) {\n  if (!initializedNativeApps) {\n    initializeNativeApps();\n  }\n  const app = APP_REGISTRY[name];\n\n  if (!app) {\n    throw new Error(`No Firebase App '${name}' has been created - call firebase.initializeApp()`);\n  }\n\n  return app;\n}\n\n/**\n * Gets all app instances, used for `firebase.apps`\n */\nexport function getApps() {\n  if (!initializedNativeApps) {\n    initializeNativeApps();\n  }\n  return Object.values(APP_REGISTRY);\n}\n\n/**\n *\n * @param options\n * @param configOrName\n */\nexport function initializeApp(options = {}, configOrName) {\n  let appConfig = configOrName;\n\n  if (!isObject(configOrName) || isNull(configOrName)) {\n    appConfig = {\n      name: configOrName,\n      automaticResourceManagement: false,\n      automaticDataCollectionEnabled: true,\n    };\n  }\n\n  if (isUndefined(appConfig.name)) {\n    appConfig.name = DEFAULT_APP_NAME;\n  }\n\n  const { name } = appConfig;\n\n  if (!name || !isString(name)) {\n    return Promise.reject(new Error(`Illegal App name: '${name}'`));\n  }\n\n  if (APP_REGISTRY[name]) {\n    return Promise.reject(new Error(`Firebase App named '${name}' already exists`));\n  }\n\n  // VALIDATE OPTIONS\n  if (!isObject(options)) {\n    return Promise.reject(\n      new Error(`firebase.initializeApp(options, <- expects an Object but got '${typeof options}'`),\n    );\n  }\n\n  if (!isString(options.apiKey)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'apiKey'.\"));\n  }\n\n  if (!isString(options.appId)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'appId'.\"));\n  }\n\n  // TODO - make required only if database module exists - init app on native ios&android needs changing also\n  if (!isString(options.databaseURL)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'databaseURL'.\"));\n  }\n\n  // TODO - make required only if messaging/notifications module exists - init app on native ios&android needs changing also\n  if (!isString(options.messagingSenderId)) {\n    return Promise.reject(\n      new Error(\"Missing or invalid FirebaseOptions property 'messagingSenderId'.\"),\n    );\n  }\n\n  if (!isString(options.projectId)) {\n    return Promise.reject(new Error(\"Missing or invalid FirebaseOptions property 'projectId'.\"));\n  }\n\n  // TODO - make required only if database module exists - init app on native ios&android needs changing also\n  if (!isString(options.storageBucket)) {\n    return Promise.reject(\n      new Error(\"Missing or invalid FirebaseOptions property 'storageBucket'.\"),\n    );\n  }\n\n  const app = new FirebaseApp(options, { name }, false, deleteApp.bind(null, name, true));\n\n  // Note these initialization actions with side effects are performed prior to knowledge of\n  // successful initialization in the native code. Native code *may* throw an error.\n  APP_REGISTRY[name] = app;\n  onAppCreateFn(APP_REGISTRY[name]);\n\n  return getAppModule()\n    .initializeApp(options, { name })\n    .then(() => {\n      app._initialized = true;\n      return app;\n    })\n    .catch(e => {\n      // we need to clean the app entry from registry as the app does not actually exist\n      // There are still possible side effects from `onAppCreateFn` to consider but as existing\n      // code may rely on that function running prior to native create, re-ordering it is a semantic change\n      // and will be avoided\n      delete APP_REGISTRY[name];\n\n      // Now allow calling code to handle the initialization issue\n      throw e;\n    });\n}\n\nexport function setLogLevel(logLevel) {\n  if (!['error', 'warn', 'info', 'debug', 'verbose'].includes(logLevel)) {\n    throw new Error('LogLevel must be one of \"error\", \"warn\", \"info\", \"debug\", \"verbose\"');\n  }\n\n  if (isIOS) {\n    getAppModule().setLogLevel(logLevel);\n  }\n}\n\n/**\n *\n */\nexport function deleteApp(name, nativeInitialized) {\n  if (name === DEFAULT_APP_NAME && nativeInitialized) {\n    return Promise.reject(new Error('Unable to delete the default native firebase app instance.'));\n  }\n\n  const app = APP_REGISTRY[name];\n\n  const nativeModule = getAppModule();\n\n  return nativeModule.deleteApp(name).then(() => {\n    app._deleted = true;\n    onAppDestroyFn(app);\n    delete APP_REGISTRY[name];\n  });\n}\n"]},"metadata":{},"sourceType":"module"}