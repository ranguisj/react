{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, { provideDocumentSnapshotClass } from './FirestoreDocumentReference';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestorePath from './FirestorePath';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nimport { extractFieldPathData } from './utils';\nimport { parseNativeMap } from './utils/serialize';\nexport default class FirestoreDocumentSnapshot {\n  constructor(firestore, nativeData) {\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n\n  get exists() {\n    return this._exists;\n  }\n\n  get id() {\n    return this._ref.id;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get ref() {\n    return this._ref;\n  }\n\n  data() {\n    // TODO: ehesp: Figure out how to handle this.\n    // const snapshotOptions = {};\n    //\n    // if (!isUndefined(options)) {\n    //   if (!isObject(options)) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options' expected an object if defined.`,\n    //     );\n    //   }\n    //\n    //   if (\n    //     options.serverTimestamps &&\n    //     options.serverTimestamps !== 'estimate' &&\n    //     options.serverTimestamps !== 'previous' &&\n    //     options.serverTimestamps !== 'none'\n    //   ) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options.serverTimestamps' expected one of 'estimate', 'previous' or 'none'.`,\n    //     );\n    //   }\n    // }\n    return this._data;\n  }\n\n  get(fieldPath) {\n    // TODO: ehesp: How are SnapshotOptions handled?\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string or FieldPath.\");\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      // Is already field path\n      path = fieldPath;\n    }\n\n    return extractFieldPathData(this._data, path._segments);\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentSnapshot)) {\n      throw new Error(\"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\");\n    }\n\n    if (this.exists !== other.exists || !this.metadata.isEqual(other.metadata) || !this.ref.isEqual(other.ref)) {\n      return false;\n    }\n\n    const thisData = JSON.stringify(this.data());\n    const otherData = JSON.stringify(other.data());\n    return thisData === otherData;\n  }\n\n} // To avoid React Native require cycle\n\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/firestore/lib/FirestoreDocumentSnapshot.js"],"names":["isString","FirestoreDocumentReference","provideDocumentSnapshotClass","FirestoreFieldPath","fromDotSeparatedString","FirestorePath","FirestoreSnapshotMetadata","extractFieldPathData","parseNativeMap","FirestoreDocumentSnapshot","constructor","firestore","nativeData","_data","data","_metadata","metadata","_ref","fromName","path","_exists","exists","id","ref","get","fieldPath","Error","e","message","_segments","isEqual","other","thisData","JSON","stringify","otherData"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, {\n  provideDocumentSnapshotClass,\n} from './FirestoreDocumentReference';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestorePath from './FirestorePath';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nimport { extractFieldPathData } from './utils';\nimport { parseNativeMap } from './utils/serialize';\n\nexport default class FirestoreDocumentSnapshot {\n  constructor(firestore, nativeData) {\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n\n  get exists() {\n    return this._exists;\n  }\n\n  get id() {\n    return this._ref.id;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get ref() {\n    return this._ref;\n  }\n\n  data() {\n    // TODO: ehesp: Figure out how to handle this.\n    // const snapshotOptions = {};\n    //\n    // if (!isUndefined(options)) {\n    //   if (!isObject(options)) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options' expected an object if defined.`,\n    //     );\n    //   }\n    //\n    //   if (\n    //     options.serverTimestamps &&\n    //     options.serverTimestamps !== 'estimate' &&\n    //     options.serverTimestamps !== 'previous' &&\n    //     options.serverTimestamps !== 'none'\n    //   ) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options.serverTimestamps' expected one of 'estimate', 'previous' or 'none'.`,\n    //     );\n    //   }\n    // }\n\n    return this._data;\n  }\n\n  get(fieldPath) {\n    // TODO: ehesp: How are SnapshotOptions handled?\n\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string or FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      // Is already field path\n      path = fieldPath;\n    }\n\n    return extractFieldPathData(this._data, path._segments);\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentSnapshot)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\",\n      );\n    }\n\n    if (\n      this.exists !== other.exists ||\n      !this.metadata.isEqual(other.metadata) ||\n      !this.ref.isEqual(other.ref)\n    ) {\n      return false;\n    }\n\n    const thisData = JSON.stringify(this.data());\n    const otherData = JSON.stringify(other.data());\n\n    return thisData === otherData;\n  }\n}\n\n// To avoid React Native require cycle\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);\n"]},"metadata":{},"sourceType":"module"}