{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { Base64, isString } from '@react-native-firebase/app/lib/common';\nexport default class FirestoreBlob {\n  constructor() {\n    let internal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let binaryString = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (internal === false) {\n      throw new Error('firebase.firestore.Blob constructor is private, use Blob.<field>() instead.');\n    }\n\n    this._binaryString = binaryString;\n  }\n  /**\n   * Creates a new Blob from the given Base64 string\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromBase64String\n   * @param base64 string\n   */\n\n\n  static fromBase64String(base64) {\n    if (!isString(base64) || base64.length < 1) {\n      throw new Error('firestore.Blob.fromBase64String expects a string of at least 1 character in length');\n    }\n\n    return new FirestoreBlob(true, Base64.atob(base64));\n  }\n  /**\n   * Creates a new Blob from the given Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromUint8Array\n   * @param array Array\n   */\n\n\n  static fromUint8Array(array) {\n    if (!(array instanceof Uint8Array)) {\n      throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n    }\n\n    return new FirestoreBlob(true, Array.prototype.map.call(array, $ => String.fromCharCode($)).join(''));\n  }\n  /**\n   * Returns 'true' if this Blob is equal to the provided one.\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#isEqual\n   * @param {*} blob Blob The Blob to compare against. Value must not be null.\n   * @returns boolean 'true' if this Blob is equal to the provided one.\n   */\n\n\n  isEqual(blob) {\n    if (!(blob instanceof FirestoreBlob)) {\n      throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n    }\n\n    return this._binaryString === blob._binaryString;\n  }\n  /**\n   * Returns the bytes of a Blob as a Base64-encoded string.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toBase64\n   * @returns string The Base64-encoded string created from the Blob object.\n   */\n\n\n  toBase64() {\n    return Base64.btoa(this._binaryString);\n  }\n  /**\n   * Returns the bytes of a Blob in a new Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toUint8Array\n   * @returns non-null Uint8Array The Uint8Array created from the Blob object.\n   */\n\n\n  toUint8Array() {\n    return new Uint8Array(this._binaryString.split('').map(c => c.charCodeAt(0)));\n  }\n  /**\n   * Returns a string representation of this blob instance\n   *\n   * @returns {string}\n   * @memberof Blob\n   */\n\n\n  toString() {\n    return `firestore.Blob(base64: ${this.toBase64()})`;\n  }\n\n}","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/firestore/lib/FirestoreBlob.js"],"names":["Base64","isString","FirestoreBlob","constructor","internal","binaryString","Error","_binaryString","fromBase64String","base64","length","atob","fromUint8Array","array","Uint8Array","Array","prototype","map","call","$","String","fromCharCode","join","isEqual","blob","toBase64","btoa","toUint8Array","split","c","charCodeAt","toString"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,uCAAjC;AAEA,eAAe,MAAMC,aAAN,CAAoB;AACjCC,EAAAA,WAAW,GAAiC;AAAA,QAAhCC,QAAgC,uEAArB,KAAqB;AAAA,QAAdC,YAAc;;AAC1C,QAAID,QAAQ,KAAK,KAAjB,EAAwB;AACtB,YAAM,IAAIE,KAAJ,CACJ,6EADI,CAAN;AAGD;;AAED,SAAKC,aAAL,GAAqBF,YAArB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACyB,SAAhBG,gBAAgB,CAACC,MAAD,EAAS;AAC9B,QAAI,CAACR,QAAQ,CAACQ,MAAD,CAAT,IAAqBA,MAAM,CAACC,MAAP,GAAgB,CAAzC,EAA4C;AAC1C,YAAM,IAAIJ,KAAJ,CACJ,oFADI,CAAN;AAGD;;AAED,WAAO,IAAIJ,aAAJ,CAAkB,IAAlB,EAAwBF,MAAM,CAACW,IAAP,CAAYF,MAAZ,CAAxB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACuB,SAAdG,cAAc,CAACC,KAAD,EAAQ;AAC3B,QAAI,EAAEA,KAAK,YAAYC,UAAnB,CAAJ,EAAoC;AAClC,YAAM,IAAIR,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,WAAO,IAAIJ,aAAJ,CACL,IADK,EAELa,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoBC,IAApB,CAAyBL,KAAzB,EAAgCM,CAAC,IAAIC,MAAM,CAACC,YAAP,CAAoBF,CAApB,CAArC,EAA6DG,IAA7D,CAAkE,EAAlE,CAFK,CAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,QAAI,EAAEA,IAAI,YAAYtB,aAAlB,CAAJ,EAAsC;AACpC,YAAM,IAAII,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,WAAO,KAAKC,aAAL,KAAuBiB,IAAI,CAACjB,aAAnC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEkB,EAAAA,QAAQ,GAAG;AACT,WAAOzB,MAAM,CAAC0B,IAAP,CAAY,KAAKnB,aAAjB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEoB,EAAAA,YAAY,GAAG;AACb,WAAO,IAAIb,UAAJ,CAAe,KAAKP,aAAL,CAAmBqB,KAAnB,CAAyB,EAAzB,EAA6BX,GAA7B,CAAiCY,CAAC,IAAIA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAtC,CAAf,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,GAAG;AACT,WAAQ,0BAAyB,KAAKN,QAAL,EAAgB,GAAjD;AACD;;AAtFgC","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Base64, isString } from '@react-native-firebase/app/lib/common';\n\nexport default class FirestoreBlob {\n  constructor(internal = false, binaryString) {\n    if (internal === false) {\n      throw new Error(\n        'firebase.firestore.Blob constructor is private, use Blob.<field>() instead.',\n      );\n    }\n\n    this._binaryString = binaryString;\n  }\n\n  /**\n   * Creates a new Blob from the given Base64 string\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromBase64String\n   * @param base64 string\n   */\n  static fromBase64String(base64) {\n    if (!isString(base64) || base64.length < 1) {\n      throw new Error(\n        'firestore.Blob.fromBase64String expects a string of at least 1 character in length',\n      );\n    }\n\n    return new FirestoreBlob(true, Base64.atob(base64));\n  }\n\n  /**\n   * Creates a new Blob from the given Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromUint8Array\n   * @param array Array\n   */\n  static fromUint8Array(array) {\n    if (!(array instanceof Uint8Array)) {\n      throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n    }\n\n    return new FirestoreBlob(\n      true,\n      Array.prototype.map.call(array, $ => String.fromCharCode($)).join(''),\n    );\n  }\n\n  /**\n   * Returns 'true' if this Blob is equal to the provided one.\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#isEqual\n   * @param {*} blob Blob The Blob to compare against. Value must not be null.\n   * @returns boolean 'true' if this Blob is equal to the provided one.\n   */\n  isEqual(blob) {\n    if (!(blob instanceof FirestoreBlob)) {\n      throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n    }\n\n    return this._binaryString === blob._binaryString;\n  }\n\n  /**\n   * Returns the bytes of a Blob as a Base64-encoded string.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toBase64\n   * @returns string The Base64-encoded string created from the Blob object.\n   */\n  toBase64() {\n    return Base64.btoa(this._binaryString);\n  }\n\n  /**\n   * Returns the bytes of a Blob in a new Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toUint8Array\n   * @returns non-null Uint8Array The Uint8Array created from the Blob object.\n   */\n  toUint8Array() {\n    return new Uint8Array(this._binaryString.split('').map(c => c.charCodeAt(0)));\n  }\n\n  /**\n   * Returns a string representation of this blob instance\n   *\n   * @returns {string}\n   * @memberof Blob\n   */\n  toString() {\n    return `firestore.Blob(base64: ${this.toBase64()})`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}