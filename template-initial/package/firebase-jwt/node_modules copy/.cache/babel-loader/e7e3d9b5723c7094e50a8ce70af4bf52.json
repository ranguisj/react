{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nexport default class FirestoreTransaction {\n  constructor(firestore, meta) {\n    this._firestore = firestore;\n    this._meta = meta;\n  }\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n\n\n  _prepare() {\n    this._calledGetCount = 0;\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   */\n\n\n  get(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.get(*) 'documentRef' expected a DocumentReference.\");\n    }\n\n    this._calledGetCount++;\n    return this._firestore.native.transactionGetDocument(this._meta.id, documentRef.path).then(data => new FirestoreDocumentSnapshot(this._firestore, data));\n  }\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   */\n\n\n  set(documentRef, data, options) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.set(*) 'documentRef' expected a DocumentReference.\");\n    }\n\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.set(_, *) 'data' must be an object..\");\n    }\n\n    let setOptions;\n\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().runTransaction() Transaction.set(_, _, *) ${e.message}.`);\n    }\n\n    this._commandBuffer.push({\n      type: 'SET',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions\n    });\n\n    return this;\n  }\n\n  update(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.update(*) 'documentRef' expected a DocumentReference.\");\n    }\n\n    let data;\n\n    try {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().runTransaction() Transaction.update(_, *) ${e.message}`);\n    }\n\n    this._commandBuffer.push({\n      type: 'UPDATE',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties)\n    });\n\n    return this;\n  }\n\n  delete(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore().runTransaction() Transaction.delete(*) 'documentRef' expected a DocumentReference.\");\n    }\n\n    this._commandBuffer.push({\n      type: 'DELETE',\n      path: documentRef.path\n    });\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/firestore/lib/FirestoreTransaction.js"],"names":["isObject","FirestoreDocumentReference","FirestoreDocumentSnapshot","parseSetOptions","parseUpdateArgs","buildNativeMap","FirestoreTransaction","constructor","firestore","meta","_firestore","_meta","_prepare","_calledGetCount","_commandBuffer","_pendingResult","undefined","get","documentRef","Error","native","transactionGetDocument","id","path","then","data","set","options","setOptions","e","message","push","type","_settings","ignoreUndefinedProperties","update","args","delete"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nexport default class FirestoreTransaction {\n  constructor(firestore, meta) {\n    this._firestore = firestore;\n    this._meta = meta;\n  }\n\n  /**\n   * Clears the command buffer and any pending result in prep for\n   * the next transaction iteration attempt.\n   *\n   * @private\n   */\n  _prepare() {\n    this._calledGetCount = 0;\n    this._commandBuffer = [];\n    this._pendingResult = undefined;\n  }\n\n  /**\n   * Reads the document referenced by the provided DocumentReference.\n   */\n  get(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.get(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    this._calledGetCount++;\n    return this._firestore.native\n      .transactionGetDocument(this._meta.id, documentRef.path)\n      .then(data => new FirestoreDocumentSnapshot(this._firestore, data));\n  }\n\n  /**\n   * Writes to the document referred to by the provided DocumentReference.\n   * If the document does not exist yet, it will be created. If you pass options,\n   * the provided data can be merged into the existing document.\n   */\n  set(documentRef, data, options) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.set(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    if (!isObject(data)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.set(_, *) 'data' must be an object..\",\n      );\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore().runTransaction() Transaction.set(_, _, *) ${e.message}.`,\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'SET',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions,\n    });\n\n    return this;\n  }\n\n  update(documentRef, ...args) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.update(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore().runTransaction() Transaction.update(_, *) ${e.message}`,\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'UPDATE',\n      path: documentRef.path,\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n    });\n\n    return this;\n  }\n\n  delete(documentRef) {\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().runTransaction() Transaction.delete(*) 'documentRef' expected a DocumentReference.\",\n      );\n    }\n\n    this._commandBuffer.push({\n      type: 'DELETE',\n      path: documentRef.path,\n    });\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}