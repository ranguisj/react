{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isString } from '@react-native-firebase/app/lib/common';\nconst RESERVED = new RegExp('[~*/\\\\[\\\\]]');\nexport default class FirestoreFieldPath {\n  static documentId() {\n    return DOCUMENT_ID;\n  }\n\n  constructor() {\n    for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {\n      segments[_key] = arguments[_key];\n    }\n\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n\n      if (!isString(segment) || segment === '') {\n        throw new Error(`firebase.firestore.FieldPath invalid segment at index ${i}, expected a non-empty string.`);\n      }\n    }\n\n    this._segments = segments;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldPath)) {\n      throw new Error(\"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\");\n    }\n\n    return this._toPath() === other._toPath();\n  }\n\n  _toPath() {\n    return this._segments.join('.');\n  }\n\n  _toArray() {\n    return this._segments;\n  }\n\n}\nexport const DOCUMENT_ID = new FirestoreFieldPath('__name__');\nexport function fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\");\n  }\n\n  const found = path.search(RESERVED);\n\n  if (found > 0) {\n    throw new Error(`Invalid field path (${path}). Paths must not contain '~', '*', '/', '[', or ']'.`);\n  }\n\n  return new FirestoreFieldPath(...path.split('.'));\n}","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/firestore/lib/FirestoreFieldPath.js"],"names":["isString","RESERVED","RegExp","FirestoreFieldPath","documentId","DOCUMENT_ID","constructor","segments","length","Error","i","segment","_segments","isEqual","other","_toPath","join","_toArray","fromDotSeparatedString","path","startsWith","endsWith","indexOf","found","search","split"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,uCAAzB;AAEA,MAAMC,QAAQ,GAAG,IAAIC,MAAJ,CAAW,aAAX,CAAjB;AAEA,eAAe,MAAMC,kBAAN,CAAyB;AACrB,SAAVC,UAAU,GAAG;AAClB,WAAOC,WAAP;AACD;;AAEDC,EAAAA,WAAW,GAAc;AAAA,sCAAVC,QAAU;AAAVA,MAAAA,QAAU;AAAA;;AACvB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAM,IAAIC,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAED,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACC,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;AACxC,YAAMC,OAAO,GAAGJ,QAAQ,CAACG,CAAD,CAAxB;;AACA,UAAI,CAACV,QAAQ,CAACW,OAAD,CAAT,IAAsBA,OAAO,KAAK,EAAtC,EAA0C;AACxC,cAAM,IAAIF,KAAJ,CACH,yDAAwDC,CAAE,gCADvD,CAAN;AAGD;AACF;;AAED,SAAKE,SAAL,GAAiBL,QAAjB;AACD;;AAEDM,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,QAAI,EAAEA,KAAK,YAAYX,kBAAnB,CAAJ,EAA4C;AAC1C,YAAM,IAAIM,KAAJ,CACJ,iFADI,CAAN;AAGD;;AAED,WAAO,KAAKM,OAAL,OAAmBD,KAAK,CAACC,OAAN,EAA1B;AACD;;AAEDA,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKH,SAAL,CAAeI,IAAf,CAAoB,GAApB,CAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKL,SAAZ;AACD;;AAtCqC;AAyCxC,OAAO,MAAMP,WAAW,GAAG,IAAIF,kBAAJ,CAAuB,UAAvB,CAApB;AAEP,OAAO,SAASe,sBAAT,CAAgCC,IAAhC,EAAsC;AAC3C,MAAIA,IAAI,KAAK,EAAT,IAAeA,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAAf,IAAuCD,IAAI,CAACE,QAAL,CAAc,GAAd,CAAvC,IAA6DF,IAAI,CAACG,OAAL,CAAa,IAAb,IAAqB,CAAtF,EAAyF;AACvF,UAAM,IAAIb,KAAJ,CACJ,6FADI,CAAN;AAGD;;AAED,QAAMc,KAAK,GAAGJ,IAAI,CAACK,MAAL,CAAYvB,QAAZ,CAAd;;AAEA,MAAIsB,KAAK,GAAG,CAAZ,EAAe;AACb,UAAM,IAAId,KAAJ,CACH,uBAAsBU,IAAK,uDADxB,CAAN;AAGD;;AAED,SAAO,IAAIhB,kBAAJ,CAAuB,GAAGgB,IAAI,CAACM,KAAL,CAAW,GAAX,CAA1B,CAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\n\nconst RESERVED = new RegExp('[~*/\\\\[\\\\]]');\n\nexport default class FirestoreFieldPath {\n  static documentId() {\n    return DOCUMENT_ID;\n  }\n\n  constructor(...segments) {\n    if (segments.length === 0) {\n      throw new Error('firebase.firestore.FieldPath cannot construct FieldPath with no segments.');\n    }\n\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments[i];\n      if (!isString(segment) || segment === '') {\n        throw new Error(\n          `firebase.firestore.FieldPath invalid segment at index ${i}, expected a non-empty string.`,\n        );\n      }\n    }\n\n    this._segments = segments;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore.FieldPath.isEqual(*) 'other' expected instance of FieldPath.\",\n      );\n    }\n\n    return this._toPath() === other._toPath();\n  }\n\n  _toPath() {\n    return this._segments.join('.');\n  }\n\n  _toArray() {\n    return this._segments;\n  }\n}\n\nexport const DOCUMENT_ID = new FirestoreFieldPath('__name__');\n\nexport function fromDotSeparatedString(path) {\n  if (path === '' || path.startsWith('.') || path.endsWith('.') || path.indexOf('..') > 0) {\n    throw new Error(\n      \"Invalid field path. Paths must not be empty, begin with '.', end with '.', or contain '..'.\",\n    );\n  }\n\n  const found = path.search(RESERVED);\n\n  if (found > 0) {\n    throw new Error(\n      `Invalid field path (${path}). Paths must not contain '~', '*', '/', '[', or ']'.`,\n    );\n  }\n\n  return new FirestoreFieldPath(...path.split('.'));\n}\n"]},"metadata":{},"sourceType":"module"}