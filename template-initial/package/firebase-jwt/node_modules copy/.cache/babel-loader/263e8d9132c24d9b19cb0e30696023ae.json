{"ast":null,"code":"var _jsxFileName = \"/Users/jeremyranguis/greatwanderline/package/firebase-jwt/src/components/authGurad/AuthGuard.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport useAuth from './useAuth';\nimport Login from '../../views/auth/Login';\nimport Error from '../../views/auth/Error';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AuthGuard = props => {\n  _s();\n\n  const {\n    children\n  } = props;\n  const auth = useAuth();\n  const location = useLocation();\n  const [requestedLocation, setRequestedLocation] = useState(null);\n\n  if (!auth.isAuthenticated && location.pathname === '/starter') {\n    if (location.pathname !== requestedLocation) {\n      setRequestedLocation(location.pathname);\n      return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  } // This is done so that in case the route changes by any chance through other\n  // means between the moment of request and the render we navigate to the initially\n  // requested route.\n\n\n  if (requestedLocation && location.pathname !== requestedLocation) {\n    setRequestedLocation(null);\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: requestedLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n\n_s(AuthGuard, \"TTzP3JCA3iXjv4SFd0bTIGZnPfw=\", false, function () {\n  return [useAuth, useLocation];\n});\n\n_c = AuthGuard;\nAuthGuard.propTypes = {\n  children: PropTypes.node\n};\nexport default AuthGuard;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthGuard\");","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/src/components/authGurad/AuthGuard.js"],"names":["useState","Navigate","useLocation","PropTypes","useAuth","Login","Error","AuthGuard","props","children","auth","location","requestedLocation","setRequestedLocation","isAuthenticated","pathname","propTypes","node"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,kBAAtC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAME,IAAI,GAAGN,OAAO,EAApB;AACA,QAAMO,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM,CAACU,iBAAD,EAAoBC,oBAApB,IAA4Cb,QAAQ,CAAC,IAAD,CAA1D;;AAEA,MAAI,CAACU,IAAI,CAACI,eAAN,IAAyBH,QAAQ,CAACI,QAAT,KAAsB,UAAnD,EAA+D;AAC7D,QAAIJ,QAAQ,CAACI,QAAT,KAAsBH,iBAA1B,EAA6C;AAC3CC,MAAAA,oBAAoB,CAACF,QAAQ,CAACI,QAAV,CAApB;AACA,0BAAO,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBAAO,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAb0B,CAe3B;AACA;AACA;;;AACA,MAAIH,iBAAiB,IAAID,QAAQ,CAACI,QAAT,KAAsBH,iBAA/C,EAAkE;AAChEC,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACA,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAED;AAAd;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO;AAAA,cAAGH;AAAH,mBAAP;AACD,CAxBD;;GAAMF,S;UAESH,O,EACIF,W;;;KAHbK,S;AA0BNA,SAAS,CAACS,SAAV,GAAsB;AACpBP,EAAAA,QAAQ,EAAEN,SAAS,CAACc;AADA,CAAtB;AAIA,eAAeV,SAAf","sourcesContent":["import { useState } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport useAuth from './useAuth';\r\nimport Login from '../../views/auth/Login';\r\nimport Error from '../../views/auth/Error';\r\n\r\nconst AuthGuard = (props) => {\r\n  const { children } = props;\r\n  const auth = useAuth();\r\n  const location = useLocation();\r\n  const [requestedLocation, setRequestedLocation] = useState(null);\r\n\r\n  if (!auth.isAuthenticated && location.pathname === '/starter') {\r\n    if (location.pathname !== requestedLocation) {\r\n      setRequestedLocation(location.pathname);\r\n      return <Error />;\r\n    }\r\n\r\n    return <Login />;\r\n  }\r\n\r\n  // This is done so that in case the route changes by any chance through other\r\n  // means between the moment of request and the render we navigate to the initially\r\n  // requested route.\r\n  if (requestedLocation && location.pathname !== requestedLocation) {\r\n    setRequestedLocation(null);\r\n    return <Navigate to={requestedLocation} />;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nAuthGuard.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default AuthGuard;\r\n"]},"metadata":{},"sourceType":"module"}