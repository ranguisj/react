{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isArray, isNumber } from '@react-native-firebase/app/lib/common';\nimport { buildNativeArray, provideFieldValueClass } from './utils/serialize';\nexport const TypeFieldValueDelete = 'delete';\nexport const TypeFieldValueIncrement = 'increment';\nexport const TypeFieldValueRemove = 'array_remove';\nexport const TypeFieldValueUnion = 'array_union';\nexport const TypeFieldValueTimestamp = 'timestamp';\n\nfunction validateArrayElements(elements) {\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n\n    if (element instanceof FirestoreFieldValue) {\n      throw new Error('FieldValue instance cannot be used with other FieldValue methods.');\n    }\n\n    if (isArray(element)) {\n      throw new Error('Nested arrays are not supported');\n    }\n  }\n}\n\nexport default class FirestoreFieldValue {\n  constructor() {\n    let internal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let type = arguments.length > 1 ? arguments[1] : undefined;\n    let elements = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (internal === false) {\n      throw new Error('firebase.firestore.FieldValue constructor is private, use FieldValue.<field>() instead.');\n    }\n\n    this._type = type;\n    this._elements = elements;\n  }\n\n  static delete() {\n    return new FirestoreFieldValue(true, TypeFieldValueDelete);\n  }\n\n  static increment(n) {\n    if (!isNumber(n)) {\n      throw new Error(\"firebase.firestore.FieldValue.increment(*) 'n' expected a number value.\");\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueIncrement, n);\n  }\n\n  static serverTimestamp() {\n    return new FirestoreFieldValue(true, TypeFieldValueTimestamp);\n  }\n\n  static arrayUnion() {\n    for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {\n      elements[_key] = arguments[_key];\n    }\n\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(`firebase.firestore.FieldValue.arrayUnion(*) 'elements' called with invalid data. ${e.message}`);\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueUnion, buildNativeArray(elements));\n  }\n\n  static arrayRemove() {\n    for (var _len2 = arguments.length, elements = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      elements[_key2] = arguments[_key2];\n    }\n\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(`firebase.firestore.FieldValue.arrayRemove(*) 'elements' called with invalid data. ${e.message}`);\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueRemove, buildNativeArray(elements));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldValue)) {\n      throw new Error(\"firebase.firestore.FieldValue.isEqual(*) 'other' expected a FieldValue instance.\");\n    }\n\n    return this._type === other._type && JSON.stringify(this._elements) === JSON.stringify(other._elements);\n  }\n\n}\nprovideFieldValueClass(FirestoreFieldValue); // serialize","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/firestore/lib/FirestoreFieldValue.js"],"names":["isArray","isNumber","buildNativeArray","provideFieldValueClass","TypeFieldValueDelete","TypeFieldValueIncrement","TypeFieldValueRemove","TypeFieldValueUnion","TypeFieldValueTimestamp","validateArrayElements","elements","i","length","element","FirestoreFieldValue","Error","constructor","internal","type","_type","_elements","delete","increment","n","serverTimestamp","arrayUnion","e","message","arrayRemove","isEqual","other","JSON","stringify"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,uCAAlC;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,QAAyD,mBAAzD;AAEA,OAAO,MAAMC,oBAAoB,GAAG,QAA7B;AACP,OAAO,MAAMC,uBAAuB,GAAG,WAAhC;AACP,OAAO,MAAMC,oBAAoB,GAAG,cAA7B;AACP,OAAO,MAAMC,mBAAmB,GAAG,aAA5B;AACP,OAAO,MAAMC,uBAAuB,GAAG,WAAhC;;AAEP,SAASC,qBAAT,CAA+BC,QAA/B,EAAyC;AACvC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAME,OAAO,GAAGH,QAAQ,CAACC,CAAD,CAAxB;;AAEA,QAAIE,OAAO,YAAYC,mBAAvB,EAA4C;AAC1C,YAAM,IAAIC,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAED,QAAIf,OAAO,CAACa,OAAD,CAAX,EAAsB;AACpB,YAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;AACF;AACF;;AAED,eAAe,MAAMD,mBAAN,CAA0B;AACvCE,EAAAA,WAAW,GAAmC;AAAA,QAAlCC,QAAkC,uEAAvB,KAAuB;AAAA,QAAhBC,IAAgB;AAAA,QAAVR,QAAU;;AAC5C,QAAIO,QAAQ,KAAK,KAAjB,EAAwB;AACtB,YAAM,IAAIF,KAAJ,CACJ,yFADI,CAAN;AAGD;;AAED,SAAKI,KAAL,GAAaD,IAAb;AACA,SAAKE,SAAL,GAAiBV,QAAjB;AACD;;AAEY,SAANW,MAAM,GAAG;AACd,WAAO,IAAIP,mBAAJ,CAAwB,IAAxB,EAA8BV,oBAA9B,CAAP;AACD;;AAEe,SAATkB,SAAS,CAACC,CAAD,EAAI;AAClB,QAAI,CAACtB,QAAQ,CAACsB,CAAD,CAAb,EAAkB;AAChB,YAAM,IAAIR,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAED,WAAO,IAAID,mBAAJ,CAAwB,IAAxB,EAA8BT,uBAA9B,EAAuDkB,CAAvD,CAAP;AACD;;AAEqB,SAAfC,eAAe,GAAG;AACvB,WAAO,IAAIV,mBAAJ,CAAwB,IAAxB,EAA8BN,uBAA9B,CAAP;AACD;;AAEgB,SAAViB,UAAU,GAAc;AAAA,sCAAVf,QAAU;AAAVA,MAAAA,QAAU;AAAA;;AAC7B,QAAI;AACFD,MAAAA,qBAAqB,CAACC,QAAD,CAArB;AACD,KAFD,CAEE,OAAOgB,CAAP,EAAU;AACV,YAAM,IAAIX,KAAJ,CACH,oFAAmFW,CAAC,CAACC,OAAQ,EAD1F,CAAN;AAGD;;AAED,WAAO,IAAIb,mBAAJ,CAAwB,IAAxB,EAA8BP,mBAA9B,EAAmDL,gBAAgB,CAACQ,QAAD,CAAnE,CAAP;AACD;;AAEiB,SAAXkB,WAAW,GAAc;AAAA,uCAAVlB,QAAU;AAAVA,MAAAA,QAAU;AAAA;;AAC9B,QAAI;AACFD,MAAAA,qBAAqB,CAACC,QAAD,CAArB;AACD,KAFD,CAEE,OAAOgB,CAAP,EAAU;AACV,YAAM,IAAIX,KAAJ,CACH,qFAAoFW,CAAC,CAACC,OAAQ,EAD3F,CAAN;AAGD;;AAED,WAAO,IAAIb,mBAAJ,CAAwB,IAAxB,EAA8BR,oBAA9B,EAAoDJ,gBAAgB,CAACQ,QAAD,CAApE,CAAP;AACD;;AAEDmB,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,QAAI,EAAEA,KAAK,YAAYhB,mBAAnB,CAAJ,EAA6C;AAC3C,YAAM,IAAIC,KAAJ,CACJ,kFADI,CAAN;AAGD;;AAED,WACE,KAAKI,KAAL,KAAeW,KAAK,CAACX,KAArB,IACAY,IAAI,CAACC,SAAL,CAAe,KAAKZ,SAApB,MAAmCW,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACV,SAArB,CAFrC;AAID;;AA/DsC;AAkEzCjB,sBAAsB,CAACW,mBAAD,CAAtB,C,CAA6C","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isArray, isNumber } from '@react-native-firebase/app/lib/common';\nimport { buildNativeArray, provideFieldValueClass } from './utils/serialize';\n\nexport const TypeFieldValueDelete = 'delete';\nexport const TypeFieldValueIncrement = 'increment';\nexport const TypeFieldValueRemove = 'array_remove';\nexport const TypeFieldValueUnion = 'array_union';\nexport const TypeFieldValueTimestamp = 'timestamp';\n\nfunction validateArrayElements(elements) {\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n\n    if (element instanceof FirestoreFieldValue) {\n      throw new Error('FieldValue instance cannot be used with other FieldValue methods.');\n    }\n\n    if (isArray(element)) {\n      throw new Error('Nested arrays are not supported');\n    }\n  }\n}\n\nexport default class FirestoreFieldValue {\n  constructor(internal = false, type, elements) {\n    if (internal === false) {\n      throw new Error(\n        'firebase.firestore.FieldValue constructor is private, use FieldValue.<field>() instead.',\n      );\n    }\n\n    this._type = type;\n    this._elements = elements;\n  }\n\n  static delete() {\n    return new FirestoreFieldValue(true, TypeFieldValueDelete);\n  }\n\n  static increment(n) {\n    if (!isNumber(n)) {\n      throw new Error(\"firebase.firestore.FieldValue.increment(*) 'n' expected a number value.\");\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueIncrement, n);\n  }\n\n  static serverTimestamp() {\n    return new FirestoreFieldValue(true, TypeFieldValueTimestamp);\n  }\n\n  static arrayUnion(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore.FieldValue.arrayUnion(*) 'elements' called with invalid data. ${e.message}`,\n      );\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueUnion, buildNativeArray(elements));\n  }\n\n  static arrayRemove(...elements) {\n    try {\n      validateArrayElements(elements);\n    } catch (e) {\n      throw new Error(\n        `firebase.firestore.FieldValue.arrayRemove(*) 'elements' called with invalid data. ${e.message}`,\n      );\n    }\n\n    return new FirestoreFieldValue(true, TypeFieldValueRemove, buildNativeArray(elements));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreFieldValue)) {\n      throw new Error(\n        \"firebase.firestore.FieldValue.isEqual(*) 'other' expected a FieldValue instance.\",\n      );\n    }\n\n    return (\n      this._type === other._type &&\n      JSON.stringify(this._elements) === JSON.stringify(other._elements)\n    );\n  }\n}\n\nprovideFieldValueClass(FirestoreFieldValue); // serialize\n"]},"metadata":{},"sourceType":"module"}