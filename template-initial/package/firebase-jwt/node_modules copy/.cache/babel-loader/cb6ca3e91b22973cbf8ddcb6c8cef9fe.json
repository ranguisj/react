{"ast":null,"code":"/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nimport { isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport { parseSetOptions, parseSnapshotArgs, parseUpdateArgs } from './utils';\nimport { buildNativeMap, provideDocumentReferenceClass } from './utils/serialize'; // To avoid React Native require cycle warnings\n\nlet FirestoreCollectionReference = null;\nexport function provideCollectionReferenceClass(collectionReference) {\n  FirestoreCollectionReference = collectionReference;\n}\nlet FirestoreDocumentSnapshot = null;\nexport function provideDocumentSnapshotClass(documentSnapshot) {\n  FirestoreDocumentSnapshot = documentSnapshot;\n}\nlet _id = 0;\nexport default class FirestoreDocumentReference {\n  constructor(firestore, documentPath) {\n    this._firestore = firestore;\n    this._documentPath = documentPath;\n  }\n\n  get firestore() {\n    return this._firestore;\n  }\n\n  get id() {\n    return this._documentPath.id;\n  }\n\n  get parent() {\n    const parentPath = this._documentPath.parent();\n\n    return new FirestoreCollectionReference(this._firestore, parentPath);\n  }\n\n  get path() {\n    return this._documentPath.relativeName;\n  }\n\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\"firebase.firestore().doc().collection(*) 'collectionPath' must be a string value.\");\n    }\n\n    if (collectionPath === '') {\n      throw new Error(\"firebase.firestore().doc().collection(*) 'collectionPath' must be a non-empty string.\");\n    }\n\n    const path = this._documentPath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(\"firebase.firestore().doc().collection(*) 'collectionPath' must point to a collection.\");\n    }\n\n    return new FirestoreCollectionReference(this._firestore, path);\n  }\n\n  delete() {\n    return this._firestore.native.documentDelete(this.path);\n  }\n\n  get(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\"firebase.firestore().doc().get(*) 'options' must be an object is provided.\");\n    }\n\n    if (options && options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n      throw new Error(\"firebase.firestore().doc().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\");\n    }\n\n    return this._firestore.native.documentGet(this.path, options).then(data => new FirestoreDocumentSnapshot(this._firestore, data));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentReference)) {\n      throw new Error(\"firebase.firestore().doc().isEqual(*) 'other' expected a DocumentReference instance.\");\n    }\n\n    return !(this.path !== other.path || this.firestore.app.name !== other.firestore.app.name || this.firestore.app.options.projectId !== other.firestore.app.options.projectId);\n  }\n\n  onSnapshot() {\n    let snapshotListenOptions;\n    let callback;\n    let onNext;\n    let onError;\n\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const options = parseSnapshotArgs(args);\n      snapshotListenOptions = options.snapshotListenOptions;\n      callback = options.callback;\n      onNext = options.onNext;\n      onError = options.onError;\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().onSnapshot(*) ${e.message}`);\n    }\n\n    function handleSuccess(documentSnapshot) {\n      callback(documentSnapshot, null);\n      onNext(documentSnapshot);\n    }\n\n    function handleError(error) {\n      callback(null, error);\n      onError(error);\n    }\n\n    const listenerId = _id++;\n\n    const onSnapshotSubscription = this._firestore.emitter.addListener(this._firestore.eventNameForApp(`firestore_document_sync_event:${listenerId}`), event => {\n      if (event.body.error) {\n        handleError(NativeError.fromEvent(event.body.error, 'firestore'));\n      } else {\n        const documentSnapshot = new FirestoreDocumentSnapshot(this._firestore, event.body.snapshot);\n        handleSuccess(documentSnapshot);\n      }\n    });\n\n    const unsubscribe = () => {\n      onSnapshotSubscription.remove();\n\n      this._firestore.native.documentOffSnapshot(listenerId);\n    };\n\n    this._firestore.native.documentOnSnapshot(this.path, listenerId, snapshotListenOptions);\n\n    return unsubscribe;\n  }\n\n  set(data, options) {\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore().doc().set(*) 'data' must be an object.\");\n    }\n\n    let setOptions;\n\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().set(_, *) ${e.message}.`);\n    }\n\n    return this._firestore.native.documentSet(this.path, buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties), setOptions);\n  }\n\n  update() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (args.length === 0) {\n      throw new Error('firebase.firestore().doc().update(*) expected at least 1 argument but was called with 0 arguments.');\n    }\n\n    let data;\n\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().update(*) ${e.message}`);\n    }\n\n    return this._firestore.native.documentUpdate(this.path, buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties));\n  }\n\n}\nprovideDocumentReferenceClass(FirestoreDocumentReference); // serialize","map":{"version":3,"sources":["/Users/jeremyranguis/greatwanderline/package/firebase-jwt/node_modules/@react-native-firebase/firestore/lib/FirestoreDocumentReference.js"],"names":["isObject","isString","isUndefined","NativeError","parseSetOptions","parseSnapshotArgs","parseUpdateArgs","buildNativeMap","provideDocumentReferenceClass","FirestoreCollectionReference","provideCollectionReferenceClass","collectionReference","FirestoreDocumentSnapshot","provideDocumentSnapshotClass","documentSnapshot","_id","FirestoreDocumentReference","constructor","firestore","documentPath","_firestore","_documentPath","id","parent","parentPath","path","relativeName","collection","collectionPath","Error","child","isCollection","delete","native","documentDelete","get","options","source","documentGet","then","data","isEqual","other","app","name","projectId","onSnapshot","snapshotListenOptions","callback","onNext","onError","args","e","message","handleSuccess","handleError","error","listenerId","onSnapshotSubscription","emitter","addListener","eventNameForApp","event","body","fromEvent","snapshot","unsubscribe","remove","documentOffSnapshot","documentOnSnapshot","set","setOptions","documentSet","_settings","ignoreUndefinedProperties","update","length","documentUpdate"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport { parseSetOptions, parseSnapshotArgs, parseUpdateArgs } from './utils';\nimport { buildNativeMap, provideDocumentReferenceClass } from './utils/serialize';\n\n// To avoid React Native require cycle warnings\nlet FirestoreCollectionReference = null;\nexport function provideCollectionReferenceClass(collectionReference) {\n  FirestoreCollectionReference = collectionReference;\n}\n\nlet FirestoreDocumentSnapshot = null;\nexport function provideDocumentSnapshotClass(documentSnapshot) {\n  FirestoreDocumentSnapshot = documentSnapshot;\n}\n\nlet _id = 0;\n\nexport default class FirestoreDocumentReference {\n  constructor(firestore, documentPath) {\n    this._firestore = firestore;\n    this._documentPath = documentPath;\n  }\n\n  get firestore() {\n    return this._firestore;\n  }\n\n  get id() {\n    return this._documentPath.id;\n  }\n\n  get parent() {\n    const parentPath = this._documentPath.parent();\n    return new FirestoreCollectionReference(this._firestore, parentPath);\n  }\n\n  get path() {\n    return this._documentPath.relativeName;\n  }\n\n  collection(collectionPath) {\n    if (!isString(collectionPath)) {\n      throw new Error(\n        \"firebase.firestore().doc().collection(*) 'collectionPath' must be a string value.\",\n      );\n    }\n\n    if (collectionPath === '') {\n      throw new Error(\n        \"firebase.firestore().doc().collection(*) 'collectionPath' must be a non-empty string.\",\n      );\n    }\n\n    const path = this._documentPath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error(\n        \"firebase.firestore().doc().collection(*) 'collectionPath' must point to a collection.\",\n      );\n    }\n\n    return new FirestoreCollectionReference(this._firestore, path);\n  }\n\n  delete() {\n    return this._firestore.native.documentDelete(this.path);\n  }\n\n  get(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\"firebase.firestore().doc().get(*) 'options' must be an object is provided.\");\n    }\n\n    if (\n      options &&\n      options.source &&\n      options.source !== 'default' &&\n      options.source !== 'server' &&\n      options.source !== 'cache'\n    ) {\n      throw new Error(\n        \"firebase.firestore().doc().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\",\n      );\n    }\n\n    return this._firestore.native\n      .documentGet(this.path, options)\n      .then(data => new FirestoreDocumentSnapshot(this._firestore, data));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore().doc().isEqual(*) 'other' expected a DocumentReference instance.\",\n      );\n    }\n\n    return !(\n      this.path !== other.path ||\n      this.firestore.app.name !== other.firestore.app.name ||\n      this.firestore.app.options.projectId !== other.firestore.app.options.projectId\n    );\n  }\n\n  onSnapshot(...args) {\n    let snapshotListenOptions;\n    let callback;\n    let onNext;\n    let onError;\n\n    try {\n      const options = parseSnapshotArgs(args);\n      snapshotListenOptions = options.snapshotListenOptions;\n      callback = options.callback;\n      onNext = options.onNext;\n      onError = options.onError;\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().onSnapshot(*) ${e.message}`);\n    }\n\n    function handleSuccess(documentSnapshot) {\n      callback(documentSnapshot, null);\n      onNext(documentSnapshot);\n    }\n\n    function handleError(error) {\n      callback(null, error);\n      onError(error);\n    }\n\n    const listenerId = _id++;\n\n    const onSnapshotSubscription = this._firestore.emitter.addListener(\n      this._firestore.eventNameForApp(`firestore_document_sync_event:${listenerId}`),\n      event => {\n        if (event.body.error) {\n          handleError(NativeError.fromEvent(event.body.error, 'firestore'));\n        } else {\n          const documentSnapshot = new FirestoreDocumentSnapshot(\n            this._firestore,\n            event.body.snapshot,\n          );\n          handleSuccess(documentSnapshot);\n        }\n      },\n    );\n\n    const unsubscribe = () => {\n      onSnapshotSubscription.remove();\n      this._firestore.native.documentOffSnapshot(listenerId);\n    };\n\n    this._firestore.native.documentOnSnapshot(this.path, listenerId, snapshotListenOptions);\n\n    return unsubscribe;\n  }\n\n  set(data, options) {\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore().doc().set(*) 'data' must be an object.\");\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().set(_, *) ${e.message}.`);\n    }\n\n    return this._firestore.native.documentSet(\n      this.path,\n      buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      setOptions,\n    );\n  }\n\n  update(...args) {\n    if (args.length === 0) {\n      throw new Error(\n        'firebase.firestore().doc().update(*) expected at least 1 argument but was called with 0 arguments.',\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().update(*) ${e.message}`);\n    }\n\n    return this._firestore.native.documentUpdate(\n      this.path,\n      buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n    );\n  }\n}\n\nprovideDocumentReferenceClass(FirestoreDocumentReference); // serialize\n"]},"metadata":{},"sourceType":"module"}